# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"} expected\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"] expected\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"syntax error at end of program\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.text
	.align	16
parse_token:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ebx
	call	get_lexeme
	movl	current_lexeme, %edx
	leal	-1(%edx), %edx
	cmpl	$10, %edx
	jae	.L159
	jmp	*.L160(, %edx, 4)
.L161:
	call	discard_lexeme
	movl	(current_lexeme + 4), %edx
	movl	%edx, 0(%ebx)
	jmp	.L162
.L163:
	call	discard_lexeme
	xorl	%edx, %edx
	movl	%edx, 0(%ebx)
	movl	(current_lexeme + 4), %edx
	movl	%edx, 4(%ebx)
	jmp	.L162
.L164:
	call	discard_lexeme
	movl	$1, %eax
	movl	%eax, 0(%ebx)
	movl	(current_lexeme + 4), %edx
	movl	%edx, 4(%ebx)
	jmp	.L162
.L165:
	call	discard_lexeme
	movl	$2, %eax
	movl	%eax, 0(%ebx)
	movl	(current_lexeme + 4), %edx
	movl	%edx, 4(%ebx)
	jmp	.L162
.L166:
	call	discard_lexeme
	movl	$3, %eax
	movl	%eax, 0(%ebx)
	movl	(current_lexeme + 4), %ecx
	movl	%ecx, 4(%ebx)
	jmp	.L162
.L167:
	call	discard_lexeme
	movl	$4, %eax
	movl	%eax, 0(%ebx)
	movsd	(current_lexeme + 4), %xmm1
	movsd	%xmm1, 4(%ebx)
	jmp	.L162
.L168:
	call	discard_lexeme
	movl	$5, %ecx
	movl	%ecx, 0(%ebx)
	movl	(current_lexeme + 4), %ecx
	movl	%ecx, 4(%ebx)
	jmp	.L162
.L169:
	call	discard_lexeme
	movl	$7, %ecx
	movl	%ecx, 0(%ebx)
	call	parse_tokenlist
	movl	%eax, 4(%ebx)
	call	get_lexeme
	movl	current_lexeme, %eax
	cmpl	$9, %eax
	je	.L170
	movl	stderr, %eax
	leal	__stringlit_2, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L170:
	call	discard_lexeme
	jmp	.L162
.L171:
	call	discard_lexeme
	movl	$6, %ecx
	movl	%ecx, 0(%ebx)
	call	parse_tokenlist
	movl	%eax, 4(%ebx)
	call	get_lexeme
	movl	current_lexeme, %eax
	cmpl	$11, %eax
	je	.L172
	movl	stderr, %ecx
	leal	__stringlit_1, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L172:
	call	discard_lexeme
.L162:
	movl	$1, %eax
	jmp	.L173
.L159:
	xorl	%eax, %eax
.L173:
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	parse_token, @function
	.size	parse_token, . - parse_token
	.text
	.align	4
.L160:	.long	.L161
	.long	.L163
	.long	.L164
	.long	.L165
	.long	.L166
	.long	.L167
	.long	.L168
	.long	.L169
	.long	.L159
	.long	.L171
	.text
	.align	16
parse_tokenlist:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	$12, %ecx
	movl	$10, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	alloc_array
	movl	%eax, %ebx
	xorl	%esi, %esi
.L174:
	leal	24(%esp), %ecx
	movl	%ecx, 0(%esp)
	call	parse_token
	testl	%eax, %eax
	je	.L175
	movl	0(%ebx), %edx
	movl	4(%ebx), %ecx
	cmpl	%ecx, %edx
	jl	.L176
	movl	$12, %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	call	grow_array
.L176:
	movl	0(%ebx), %ecx
	leal	1(%ecx), %eax
	movl	%eax, 0(%ebx)
	movl	8(%ebx), %edx
	leal	0(,%esi,8), %eax
	leal	0(%eax,%esi,4), %eax
	leal	0(%edx,%eax,1), %eax
	leal	24(%esp), %edx
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
	leal	1(%esi), %esi
	jmp	.L174
.L175:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	parse_tokenlist, @function
	.size	parse_tokenlist, . - parse_tokenlist
	.text
	.align	16
	.globl parse_program
parse_program:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	call	parse_tokenlist
	movl	%eax, %ebx
	call	get_lexeme
	movl	current_lexeme, %ecx
	cmpl	$12, %ecx
	je	.L177
	movl	stderr, %ecx
	leal	__stringlit_3, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	movl	$2, %edx
	movl	%edx, 0(%esp)
	call	exit
.L177:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	parse_program, @function
	.size	parse_program, . - parse_program
