# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"P6\012# Camls 'R Us\012%d %d\012255\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"w\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.text
	.align	16
render_ray:
	.cfi_startproc
	subl	$388, %esp
	.cfi_adjust_cfa_offset	388
	leal	392(%esp), %edx
	movl	%edx, 56(%esp)
	movl	%ebx, 60(%esp)
	movl	%esi, 64(%esp)
	movl	%edi, 68(%esp)
	movl	%ebp, 72(%esp)
	movl	0(%edx), %edx
	movl	%edx, 116(%esp)
	movl	56(%esp), %edx
	movl	4(%edx), %edx
	movl	%edx, 124(%esp)
	movl	56(%esp), %edx
	movl	8(%edx), %ecx
	movl	12(%edx), %edx
	movl	%edx, 120(%esp)
	movl	56(%esp), %edx
	movl	16(%edx), %edx
	movl	%edx, 128(%esp)
	movl	56(%esp), %edx
	movl	20(%edx), %edi
	movl	24(%edx), %edx
	movl	%edx, 88(%esp)
	movl	56(%esp), %edx
	movsd	28(%edx), %xmm4
	movsd	%xmm4, 92(%esp)
	movsd	36(%edx), %xmm4
	movsd	%xmm4, 100(%esp)
	movsd	44(%edx), %xmm4
	movsd	%xmm4, 108(%esp)
	movl	52(%edx), %esi
	movl	124(%esp), %eax
	testl	%eax, %eax
	jge	.L509
	xorpd	%xmm0, %xmm0
	movsd	%xmm0, 16(%esi)
	movsd	%xmm0, 8(%esi)
	movsd	%xmm0, 0(%esi)
	jmp	.L510
.L509:
	leal	144(%esp), %eax
	movl	%edi, 0(%esp)
	movl	88(%esp), %edx
	movl	%edx, 4(%esp)
	movl	120(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%eax, 16(%esp)
	call	intersect_ray
	movl	%eax, %ebx
	cmpl	$0, %ebx
	je	.L511
	movsd	144(%esp), %xmm7
	xorpd	%xmm5, %xmm5
	comisd	%xmm5, %xmm7
	jp	.L512
	je	.L511
.L512:
	leal	264(%esp), %edx
	movl	%edi, 0(%esp)
	movl	88(%esp), %eax
	movl	%eax, 4(%esp)
	movsd	%xmm7, 8(%esp)
	movl	%edx, 16(%esp)
	call	point_along
	movl	12(%ebx), %ecx
	leal	264(%esp), %eax
	leal	288(%esp), %edi
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edi, 8(%esp)
	call	apply_to_point
	leal	288(%esp), %edi
	leal	136(%esp), %ecx
	leal	152(%esp), %ebp
	leal	160(%esp), %eax
	movl	%ebx, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ecx, 8(%esp)
	movl	%ebp, 12(%esp)
	movl	%eax, 16(%esp)
	call	surface_coords
	leal	4(%ebx), %eax
	movl	136(%esp), %edx
	movsd	152(%esp), %xmm6
	movsd	160(%esp), %xmm1
	leal	336(%esp), %ecx
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	movsd	%xmm6, 8(%esp)
	movsd	%xmm1, 16(%esp)
	movl	%ecx, 24(%esp)
	call	surface_function
	leal	264(%esp), %ecx
	movl	136(%esp), %edx
	leal	312(%esp), %eax
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%eax, 12(%esp)
	call	normal_vector
	leal	312(%esp), %ecx
	movl	88(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	dotproduct
	fstpl	80(%esp)
	leal	312(%esp), %ecx
	movsd	80(%esp), %xmm3
	addsd	%xmm3, %xmm3
	leal	168(%esp), %eax
	movl	%ecx, 0(%esp)
	movsd	%xmm3, 4(%esp)
	movl	%eax, 12(%esp)
	call	vscale
	leal	168(%esp), %edx
	leal	192(%esp), %ecx
	movl	88(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	vsub
	xorpd	%xmm7, %xmm7
	movsd	80(%esp), %xmm1
	comisd	%xmm7, %xmm1
	jbe	.L513
	leal	312(%esp), %eax
	leal	312(%esp), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	opposite
.L513:
	leal	264(%esp), %ecx
	leal	312(%esp), %ebx
	movsd	360(%esp), %xmm1
	movsd	368(%esp), %xmm0
	movsd	376(%esp), %xmm3
	leal	216(%esp), %eax
	movl	120(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	88(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movsd	%xmm1, 16(%esp)
	movsd	%xmm0, 24(%esp)
	movsd	%xmm3, 32(%esp)
	movl	128(%esp), %edx
	movl	%edx, 40(%esp)
	movl	%eax, 44(%esp)
	call	color_from_lights
	movsd	368(%esp), %xmm4
	movsd	92(%esp), %xmm3
	mulsd	%xmm4, %xmm3
	movsd	336(%esp), %xmm7
	mulsd	%xmm7, %xmm3
	movsd	100(%esp), %xmm2
	mulsd	%xmm4, %xmm2
	movsd	344(%esp), %xmm6
	mulsd	%xmm6, %xmm2
	movsd	108(%esp), %xmm0
	mulsd	%xmm4, %xmm0
	movsd	352(%esp), %xmm4
	mulsd	%xmm4, %xmm0
	movsd	.L514, %xmm4 # 0.100000000000000006
	comisd	%xmm3, %xmm4
	jbe	.L515
	comisd	%xmm2, %xmm4
	jbe	.L515
	comisd	%xmm0, %xmm4
	jbe	.L515
	xorpd	%xmm2, %xmm2
	movsd	%xmm2, 256(%esp)
	movsd	%xmm2, 248(%esp)
	movsd	%xmm2, 240(%esp)
	jmp	.L516
.L515:
	movl	124(%esp), %ecx
	leal	-1(%ecx), %edx
	xorl	%ebp, %ebp
	leal	264(%esp), %eax
	leal	192(%esp), %ebx
	leal	240(%esp), %ecx
	movl	116(%esp), %edi
	movl	%edi, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ebp, 8(%esp)
	movl	120(%esp), %edi
	movl	%edi, 12(%esp)
	movl	128(%esp), %edi
	movl	%edi, 16(%esp)
	movl	%eax, 20(%esp)
	movl	%ebx, 24(%esp)
	movsd	%xmm3, 28(%esp)
	movsd	%xmm2, 36(%esp)
	movsd	%xmm0, 44(%esp)
	movl	%ecx, 52(%esp)
	call	render_ray
.L516:
	movsd	360(%esp), %xmm7
	movl	116(%esp), %eax
	movsd	0(%eax), %xmm5
	movapd	%xmm7, %xmm6
	mulsd	%xmm5, %xmm6
	movsd	216(%esp), %xmm1
	addsd	%xmm1, %xmm6
	movsd	368(%esp), %xmm5
	movsd	240(%esp), %xmm0
	movapd	%xmm5, %xmm1
	mulsd	%xmm0, %xmm1
	addsd	%xmm1, %xmm6
	movsd	336(%esp), %xmm0
	mulsd	%xmm0, %xmm6
	movsd	%xmm6, 0(%esi)
	movl	116(%esp), %eax
	movsd	8(%eax), %xmm3
	movapd	%xmm7, %xmm0
	mulsd	%xmm3, %xmm0
	movsd	224(%esp), %xmm2
	addsd	%xmm2, %xmm0
	movsd	248(%esp), %xmm3
	movapd	%xmm5, %xmm6
	mulsd	%xmm3, %xmm6
	addsd	%xmm6, %xmm0
	movsd	344(%esp), %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, 8(%esi)
	movl	116(%esp), %edx
	movsd	16(%edx), %xmm6
	mulsd	%xmm6, %xmm7
	movsd	232(%esp), %xmm4
	addsd	%xmm4, %xmm7
	movsd	256(%esp), %xmm4
	mulsd	%xmm4, %xmm5
	addsd	%xmm5, %xmm7
	movsd	352(%esp), %xmm1
	mulsd	%xmm1, %xmm7
	movsd	%xmm7, 16(%esi)
	jmp	.L510
.L511:
	xorpd	%xmm7, %xmm7
	movsd	%xmm7, 16(%esi)
	movsd	%xmm7, 8(%esi)
	movsd	%xmm7, 0(%esi)
.L510:
	movl	60(%esp), %ebx
	movl	64(%esp), %esi
	movl	68(%esp), %edi
	movl	72(%esp), %ebp
	addl	$388, %esp
	ret
	.cfi_endproc
	.type	render_ray, @function
	.size	render_ray, . - render_ray
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L514:	.quad	0x3fb999999999999a
	.text
	.align	16
convert_color:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movsd	0(%edx), %xmm0
	movsd	.L517, %xmm1 # 255
	mulsd	%xmm1, %xmm0
	cvttsd2si %xmm0, %eax
	testl	%eax, %eax
	jge	.L518
	xorl	%eax, %eax
	jmp	.L519
.L518:
	cmpl	$255, %eax
	jle	.L519
	movl	$255, %eax
.L519:
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	convert_color, @function
	.size	convert_color, . - convert_color
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L517:	.quad	0x406fe00000000000
	.text
	.align	16
	.globl render
render:
	.cfi_startproc
	subl	$212, %esp
	.cfi_adjust_cfa_offset	212
	leal	216(%esp), %edx
	movl	%edx, 56(%esp)
	movl	%ebx, 60(%esp)
	movl	%esi, 64(%esp)
	movl	%edi, 68(%esp)
	movl	%ebp, 72(%esp)
	movl	0(%edx), %edx
	movl	%edx, 132(%esp)
	movl	56(%esp), %edx
	movl	8(%edx), %edx
	movl	%edx, 128(%esp)
	movl	56(%esp), %edx
	movl	12(%edx), %edx
	movl	%edx, 104(%esp)
	movl	56(%esp), %edx
	movl	16(%edx), %edx
	movl	%edx, 124(%esp)
	movl	56(%esp), %edx
	movsd	20(%edx), %xmm5
	movsd	%xmm5, 96(%esp)
	movl	28(%edx), %edx
	movl	%edx, 92(%esp)
	movl	56(%esp), %edx
	movl	32(%edx), %ebx
	movl	36(%edx), %esi
	movl	104(%esp), %eax
	movl	%eax, 0(%esp)
	call	compute_bounding_spheres
	movl	92(%esp), %ecx
	cvtsi2sd %ecx, %xmm0
	movsd	.L520, %xmm4 # 0.5
	mulsd	%xmm4, %xmm0
	movsd	%xmm0, 84(%esp)
	cvtsi2sd %ebx, %xmm7
	mulsd	%xmm4, %xmm7
	movsd	%xmm7, 116(%esp)
	movsd	96(%esp), %xmm3
	mulsd	%xmm4, %xmm3
	movsd	%xmm3, 0(%esp)
	call	tan
	fstpl	96(%esp)
	movsd	96(%esp), %xmm6
	movsd	84(%esp), %xmm1
	divsd	%xmm1, %xmm6
	movsd	%xmm6, 96(%esp)
	leal	__stringlit_2, %edx
	movl	%esi, 0(%esp)
	movl	%edx, 4(%esp)
	call	fopen
	movl	%eax, 80(%esp)
	leal	__stringlit_1, %ecx
	movl	80(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	92(%esp), %eax
	movl	%eax, 8(%esp)
	movl	%ebx, 12(%esp)
	call	fprintf
	call	arena_init
	leal	-1(%ebx), %esi
.L521:
	testl	%esi, %esi
	jl	.L522
	cvtsi2sd %esi, %xmm3
	movsd	116(%esp), %xmm2
	subsd	%xmm2, %xmm3
	movsd	.L523, %xmm1 # 0.5
	addsd	%xmm1, %xmm3
	movsd	96(%esp), %xmm4
	mulsd	%xmm4, %xmm3
	movsd	%xmm3, 108(%esp)
	xorl	%ebx, %ebx
.L524:
	movl	92(%esp), %ecx
	cmpl	%ecx, %ebx
	jge	.L525
	cvtsi2sd %ebx, %xmm5
	movsd	84(%esp), %xmm0
	subsd	%xmm0, %xmm5
	movsd	.L526, %xmm2 # 0.5
	addsd	%xmm2, %xmm5
	movsd	96(%esp), %xmm1
	mulsd	%xmm1, %xmm5
	xorpd	%xmm6, %xmm6
	movsd	%xmm6, 168(%esp)
	movsd	%xmm6, 160(%esp)
	movsd	.L527, %xmm3 # 1
	movsd	.L528, %xmm0 # -1
	movsd	%xmm0, 176(%esp)
	movsd	%xmm5, 184(%esp)
	movsd	108(%esp), %xmm5
	movsd	%xmm5, 192(%esp)
	movsd	%xmm3, 200(%esp)
	movl	$1, %edx
	leal	160(%esp), %ecx
	leal	184(%esp), %edi
	movsd	.L529, %xmm6 # 255
	movapd	%xmm6, %xmm7
	leal	136(%esp), %ebp
	movl	132(%esp), %eax
	movl	%eax, 0(%esp)
	movl	124(%esp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	104(%esp), %eax
	movl	%eax, 12(%esp)
	movl	128(%esp), %eax
	movl	%eax, 16(%esp)
	movl	%ecx, 20(%esp)
	movl	%edi, 24(%esp)
	movsd	%xmm6, 28(%esp)
	movsd	%xmm7, 36(%esp)
	movsd	%xmm7, 44(%esp)
	movl	%ebp, 52(%esp)
	call	render_ray
	movsd	136(%esp), %xmm4
	movsd	%xmm4, 0(%esp)
	call	convert_color
	movl	%eax, 0(%esp)
	movl	80(%esp), %edx
	movl	%edx, 4(%esp)
	call	fputc
	movsd	144(%esp), %xmm2
	movsd	%xmm2, 0(%esp)
	call	convert_color
	movl	%eax, 0(%esp)
	movl	80(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	fputc
	movsd	152(%esp), %xmm3
	movsd	%xmm3, 0(%esp)
	call	convert_color
	movl	%eax, 0(%esp)
	movl	80(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	fputc
	call	arena_clear
	leal	1(%ebx), %ebx
	jmp	.L524
.L525:
	leal	-1(%esi), %esi
	jmp	.L521
.L522:
	movl	80(%esp), %edx
	movl	%edx, 0(%esp)
	call	fclose
	movl	60(%esp), %ebx
	movl	64(%esp), %esi
	movl	68(%esp), %edi
	movl	72(%esp), %ebp
	addl	$212, %esp
	ret
	.cfi_endproc
	.type	render, @function
	.size	render, . - render
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L529:	.quad	0x406fe00000000000
.L528:	.quad	0xbff0000000000000
.L527:	.quad	0x3ff0000000000000
.L526:	.quad	0x3fe0000000000000
.L523:	.quad	0x3fe0000000000000
.L520:	.quad	0x3fe0000000000000
