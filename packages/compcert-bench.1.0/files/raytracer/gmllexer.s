# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.section	.rodata
	.align	1
__stringlit_24:
	.ascii	"plane\000"
	.type	__stringlit_24, @object
	.size	__stringlit_24, . - __stringlit_24
	.section	.rodata
	.align	1
__stringlit_30:
	.ascii	"light\000"
	.type	__stringlit_30, @object
	.size	__stringlit_30, . - __stringlit_30
	.section	.rodata
	.align	1
__stringlit_45:
	.ascii	"divi\000"
	.type	__stringlit_45, @object
	.size	__stringlit_45, . - __stringlit_45
	.section	.rodata
	.align	1
__stringlit_21:
	.ascii	"real\000"
	.type	__stringlit_21, @object
	.size	__stringlit_21, . - __stringlit_21
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"Illegal number\012\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_19:
	.ascii	"rotatex\000"
	.type	__stringlit_19, @object
	.size	__stringlit_19, . - __stringlit_19
	.section	.rodata
	.align	1
__stringlit_17:
	.ascii	"rotatez\000"
	.type	__stringlit_17, @object
	.size	__stringlit_17, . - __stringlit_17
	.section	.rodata
	.align	1
__stringlit_23:
	.ascii	"point\000"
	.type	__stringlit_23, @object
	.size	__stringlit_23, . - __stringlit_23
	.section	.rodata
	.align	1
__stringlit_10:
	.ascii	"subf\000"
	.type	__stringlit_10, @object
	.size	__stringlit_10, . - __stringlit_10
	.section	.rodata
	.align	1
__stringlit_18:
	.ascii	"rotatey\000"
	.type	__stringlit_18, @object
	.size	__stringlit_18, . - __stringlit_18
	.section	.rodata
	.align	1
__stringlit_27:
	.ascii	"mulf\000"
	.type	__stringlit_27, @object
	.size	__stringlit_27, . - __stringlit_27
	.section	.rodata
	.align	1
__stringlit_36:
	.ascii	"getz\000"
	.type	__stringlit_36, @object
	.size	__stringlit_36, . - __stringlit_36
	.section	.rodata
	.align	1
__stringlit_15:
	.ascii	"sin\000"
	.type	__stringlit_15, @object
	.size	__stringlit_15, . - __stringlit_15
	.section	.rodata
	.align	1
__stringlit_22:
	.ascii	"pointlight\000"
	.type	__stringlit_22, @object
	.size	__stringlit_22, . - __stringlit_22
	.section	.rodata
	.align	1
__stringlit_34:
	.ascii	"intersect\000"
	.type	__stringlit_34, @object
	.size	__stringlit_34, . - __stringlit_34
	.section	.rodata
	.align	1
__stringlit_26:
	.ascii	"negi\000"
	.type	__stringlit_26, @object
	.size	__stringlit_26, . - __stringlit_26
	.section	.rodata
	.align	1
__stringlit_58:
	.ascii	"true\000"
	.type	__stringlit_58, @object
	.size	__stringlit_58, . - __stringlit_58
	.section	.rodata
	.align	1
__stringlit_9:
	.ascii	"translate\000"
	.type	__stringlit_9, @object
	.size	__stringlit_9, . - __stringlit_9
	.section	.rodata
	.align	1
__stringlit_33:
	.ascii	"length\000"
	.type	__stringlit_33, @object
	.size	__stringlit_33, . - __stringlit_33
	.section	.rodata
	.align	1
__stringlit_44:
	.ascii	"divf\000"
	.type	__stringlit_44, @object
	.size	__stringlit_44, . - __stringlit_44
	.section	.rodata
	.align	1
__stringlit_4:
	.ascii	"Illegal string literal\012\000"
	.type	__stringlit_4, @object
	.size	__stringlit_4, . - __stringlit_4
	.section	.rodata
	.align	1
__stringlit_5:
	.ascii	"Illegal character `%c'\012\000"
	.type	__stringlit_5, @object
	.size	__stringlit_5, . - __stringlit_5
	.section	.rodata
	.align	1
__stringlit_11:
	.ascii	"subi\000"
	.type	__stringlit_11, @object
	.size	__stringlit_11, . - __stringlit_11
	.section	.rodata
	.align	1
__stringlit_12:
	.ascii	"sqrt\000"
	.type	__stringlit_12, @object
	.size	__stringlit_12, . - __stringlit_12
	.section	.rodata
	.align	1
__stringlit_6:
	.ascii	"print\000"
	.type	__stringlit_6, @object
	.size	__stringlit_6, . - __stringlit_6
	.section	.rodata
	.align	1
__stringlit_40:
	.ascii	"frac\000"
	.type	__stringlit_40, @object
	.size	__stringlit_40, . - __stringlit_40
	.section	.rodata
	.align	1
__stringlit_29:
	.ascii	"modi\000"
	.type	__stringlit_29, @object
	.size	__stringlit_29, . - __stringlit_29
	.section	.rodata
	.align	1
__stringlit_49:
	.ascii	"cos\000"
	.type	__stringlit_49, @object
	.size	__stringlit_49, . - __stringlit_49
	.section	.rodata
	.align	1
__stringlit_51:
	.ascii	"clampf\000"
	.type	__stringlit_51, @object
	.size	__stringlit_51, . - __stringlit_51
	.section	.rodata
	.align	1
__stringlit_31:
	.ascii	"lessf\000"
	.type	__stringlit_31, @object
	.size	__stringlit_31, . - __stringlit_31
	.section	.rodata
	.align	1
__stringlit_25:
	.ascii	"negf\000"
	.type	__stringlit_25, @object
	.size	__stringlit_25, . - __stringlit_25
	.section	.rodata
	.align	1
__stringlit_32:
	.ascii	"lessi\000"
	.type	__stringlit_32, @object
	.size	__stringlit_32, . - __stringlit_32
	.section	.rodata
	.align	1
__stringlit_43:
	.ascii	"eqi\000"
	.type	__stringlit_43, @object
	.size	__stringlit_43, . - __stringlit_43
	.section	.rodata
	.align	1
__stringlit_55:
	.ascii	"addi\000"
	.type	__stringlit_55, @object
	.size	__stringlit_55, . - __stringlit_55
	.section	.rodata
	.align	1
__stringlit_8:
	.ascii	"union\000"
	.type	__stringlit_8, @object
	.size	__stringlit_8, . - __stringlit_8
	.section	.rodata
	.align	1
__stringlit_20:
	.ascii	"render\000"
	.type	__stringlit_20, @object
	.size	__stringlit_20, . - __stringlit_20
	.section	.rodata
	.align	1
__stringlit_13:
	.ascii	"spotlight\000"
	.type	__stringlit_13, @object
	.size	__stringlit_13, . - __stringlit_13
	.section	.rodata
	.align	1
__stringlit_50:
	.ascii	"cone\000"
	.type	__stringlit_50, @object
	.size	__stringlit_50, . - __stringlit_50
	.section	.rodata
	.align	1
__stringlit_14:
	.ascii	"sphere\000"
	.type	__stringlit_14, @object
	.size	__stringlit_14, . - __stringlit_14
	.section	.rodata
	.align	1
__stringlit_46:
	.ascii	"difference\000"
	.type	__stringlit_46, @object
	.size	__stringlit_46, . - __stringlit_46
	.section	.rodata
	.align	1
__stringlit_47:
	.ascii	"cylinder\000"
	.type	__stringlit_47, @object
	.size	__stringlit_47, . - __stringlit_47
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"Bad binder /%c...\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_52:
	.ascii	"asin\000"
	.type	__stringlit_52, @object
	.size	__stringlit_52, . - __stringlit_52
	.section	.rodata
	.align	1
__stringlit_54:
	.ascii	"addf\000"
	.type	__stringlit_54, @object
	.size	__stringlit_54, . - __stringlit_54
	.section	.rodata
	.align	1
__stringlit_28:
	.ascii	"muli\000"
	.type	__stringlit_28, @object
	.size	__stringlit_28, . - __stringlit_28
	.section	.rodata
	.align	1
__stringlit_37:
	.ascii	"gety\000"
	.type	__stringlit_37, @object
	.size	__stringlit_37, . - __stringlit_37
	.section	.rodata
	.align	1
__stringlit_41:
	.ascii	"floor\000"
	.type	__stringlit_41, @object
	.size	__stringlit_41, . - __stringlit_41
	.section	.rodata
	.align	1
__stringlit_57:
	.ascii	"false\000"
	.type	__stringlit_57, @object
	.size	__stringlit_57, . - __stringlit_57
	.section	.rodata
	.align	1
__stringlit_35:
	.ascii	"if\000"
	.type	__stringlit_35, @object
	.size	__stringlit_35, . - __stringlit_35
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"Binder /%s rebinds reserved identifier\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_39:
	.ascii	"get\000"
	.type	__stringlit_39, @object
	.size	__stringlit_39, . - __stringlit_39
	.section	.rodata
	.align	1
__stringlit_7:
	.ascii	"uscale\000"
	.type	__stringlit_7, @object
	.size	__stringlit_7, . - __stringlit_7
	.section	.rodata
	.align	1
__stringlit_48:
	.ascii	"cube\000"
	.type	__stringlit_48, @object
	.size	__stringlit_48, . - __stringlit_48
	.section	.rodata
	.align	1
__stringlit_16:
	.ascii	"scale\000"
	.type	__stringlit_16, @object
	.size	__stringlit_16, . - __stringlit_16
	.section	.rodata
	.align	1
__stringlit_38:
	.ascii	"getx\000"
	.type	__stringlit_38, @object
	.size	__stringlit_38, . - __stringlit_38
	.section	.rodata
	.align	1
__stringlit_56:
	.ascii	"acos\000"
	.type	__stringlit_56, @object
	.size	__stringlit_56, . - __stringlit_56
	.section	.rodata
	.align	1
__stringlit_53:
	.ascii	"apply\000"
	.type	__stringlit_53, @object
	.size	__stringlit_53, . - __stringlit_53
	.section	.rodata
	.align	1
__stringlit_42:
	.ascii	"eqf\000"
	.type	__stringlit_42, @object
	.size	__stringlit_42, . - __stringlit_42
	.comm	current_lexeme, 12, 4
	.data
	.align	4
hashtable:
	.long	0
	.space	1020
	.type	hashtable, @object
	.size	hashtable, . - hashtable
	.local	buffer
	.comm	buffer, 1024, 1
	.text
	.align	16
get_ident:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %edx
	movb	%dl, buffer
	movl	$1, %ebx
.L106:
	call	getchar
	movl	%eax, %esi
	call	__ctype_b_loc
	movl	0(%eax), %edx
	movzwl	0(%edx,%esi,2), %ecx
	testl	$8, %ecx
	jne	.L107
	cmpl	$45, %esi
	je	.L107
	cmpl	$95, %esi
	je	.L107
	cmpl	$-1, %esi
	je	.L108
	movl	stdin, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	call	ungetc
.L108:
	xorl	%eax, %eax
	movb	%al, buffer(%ebx)
	leal	buffer, %edx
	xorl	%esi, %esi
.L109:
	movsbl	0(%edx), %eax
	testl	%eax, %eax
	je	.L110
	movl	%esi, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%esi,1), %ecx
	leal	0(%ecx,%eax,1), %esi
	leal	1(%edx), %edx
	jmp	.L109
.L110:
	andl	$255, %esi
	movl	hashtable(,%esi,4), %edi
.L111:
	cmpl	$0, %edi
	je	.L112
	leal	12(%edi), %edx
	leal	buffer, %eax
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	strcmp
	testl	%eax, %eax
	jne	.L113
	movl	0(%edi), %edx
	movl	%edx, current_lexeme
	movl	0(%edi), %edx
	cmpl	$2, %edx
	je	.L114
	movl	8(%edi), %eax
	movl	%eax, (current_lexeme + 4)
	jmp	.L115
.L114:
	leal	12(%edi), %eax
	movl	%eax, (current_lexeme + 4)
	jmp	.L115
.L113:
	movl	4(%edi), %edi
	jmp	.L111
.L112:
	leal	16(%ebx), %eax
	movl	%eax, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	movl	$2, %eax
	movl	%eax, 0(%ebx)
	leal	12(%ebx), %eax
	leal	buffer, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	strcpy
	movl	hashtable(,%esi,4), %ecx
	movl	%ecx, 4(%ebx)
	movl	%ebx, hashtable(,%esi,4)
	movl	$2, %ecx
	movl	%ecx, current_lexeme
	leal	12(%ebx), %eax
	movl	%eax, (current_lexeme + 4)
.L115:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
.L107:
	cmpl	$1023, %ebx
	jae	.L106
	movl	%ebx, %eax
	leal	1(%eax), %ebx
	leal	buffer(%eax), %ecx
	movl	%esi, %eax
	movb	%al, 0(%ecx)
	jmp	.L106
	.cfi_endproc
	.type	get_ident, @function
	.size	get_ident, . - get_ident
	.text
	.align	16
get_binder:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %eax
	movzwl	0(%eax,%ebx,2), %ecx
	testl	$1024, %ecx
	jne	.L116
	movl	stderr, %edx
	leal	__stringlit_2, %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	fprintf
	movl	$2, %edx
	movl	%edx, 0(%esp)
	call	exit
.L116:
	movl	%ebx, 0(%esp)
	call	get_ident
	movl	current_lexeme, %eax
	cmpl	$2, %eax
	je	.L117
	movl	stderr, %edx
	leal	__stringlit_1, %ecx
	movl	(current_lexeme + 4), %eax
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L117:
	movl	$3, %eax
	movl	%eax, current_lexeme
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_binder, @function
	.size	get_binder, . - get_binder
	.text
	.align	16
get_number:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %ebx
	xorl	%esi, %esi
	xorl	%edi, %edi
	cmpl	$45, %ebx
	jne	.L118
	movl	$1, %esi
	movb	%bl, buffer
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %eax
	movzwl	0(%eax,%ebx,2), %eax
	testl	$2048, %eax
	je	.L119
.L118:
	cmpl	$1023, %esi
	jae	.L120
	movl	%esi, %edx
	leal	1(%edx), %esi
	movb	%bl, buffer(%edx)
.L120:
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %eax
	movzwl	0(%eax,%ebx,2), %ecx
	testl	$2048, %ecx
	jne	.L118
	cmpl	$46, %ebx
	jne	.L121
	movl	$1, %edi
	cmpl	$1023, %esi
	jae	.L122
	movl	%esi, %ecx
	leal	1(%ecx), %esi
	movb	%bl, buffer(%ecx)
.L122:
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %eax
	movzwl	0(%eax,%ebx,2), %ecx
	testl	$2048, %ecx
	je	.L119
.L123:
	cmpl	$1023, %esi
	jae	.L124
	movl	%esi, %ecx
	leal	1(%ecx), %esi
	movb	%bl, buffer(%ecx)
.L124:
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %edx
	movzwl	0(%edx,%ebx,2), %eax
	testl	$2048, %eax
	jne	.L123
.L121:
	cmpl	$101, %ebx
	je	.L125
	cmpl	$69, %ebx
	jne	.L126
.L125:
	movl	$1, %edi
	cmpl	$1023, %esi
	jae	.L127
	movl	%esi, %edx
	leal	1(%edx), %esi
	movb	%bl, buffer(%edx)
.L127:
	call	getchar
	movl	%eax, %ebx
	cmpl	$45, %ebx
	jne	.L128
	cmpl	$1023, %esi
	jae	.L129
	movl	%esi, %eax
	leal	1(%eax), %esi
	movb	%bl, buffer(%eax)
.L129:
	call	getchar
	movl	%eax, %ebx
.L128:
	call	__ctype_b_loc
	movl	0(%eax), %edx
	movzwl	0(%edx,%ebx,2), %ecx
	testl	$2048, %ecx
	je	.L119
.L130:
	cmpl	$1023, %esi
	jae	.L131
	movl	%esi, %eax
	leal	1(%eax), %esi
	movb	%bl, buffer(%eax)
.L131:
	call	getchar
	movl	%eax, %ebx
	call	__ctype_b_loc
	movl	0(%eax), %eax
	movzwl	0(%eax,%ebx,2), %ecx
	testl	$2048, %ecx
	jne	.L130
.L126:
	cmpl	$-1, %ebx
	je	.L132
	movl	stdin, %eax
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	ungetc
.L132:
	xorl	%edx, %edx
	movb	%dl, buffer(%esi)
	testl	%edi, %edi
	je	.L133
	movl	$6, %eax
	movl	%eax, current_lexeme
	leal	buffer, %eax
	xorl	%edx, %edx
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	call	strtod
	fstpl	24(%esp)
	movsd	24(%esp), %xmm1
	movsd	%xmm1, (current_lexeme + 4)
	jmp	.L134
.L133:
	movl	$5, %eax
	movl	%eax, current_lexeme
	leal	buffer, %ecx
	movl	%ecx, 0(%esp)
	call	atoi
	movl	%eax, (current_lexeme + 4)
	jmp	.L134
.L119:
	movl	stderr, %ecx
	leal	__stringlit_3, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	fprintf
	movl	$2, %edx
	movl	%edx, 0(%esp)
	call	exit
.L134:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	get_number, @function
	.size	get_number, . - get_number
	.text
	.align	16
get_string:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	xorl	%esi, %esi
.L135:
	call	getchar
	movl	%eax, %ebx
	cmpl	$34, %ebx
	je	.L136
	call	__ctype_b_loc
	movl	0(%eax), %ecx
	movzwl	0(%ecx,%ebx,2), %eax
	testl	$16384, %eax
	je	.L137
	cmpl	$1023, %esi
	jae	.L135
	movl	%esi, %eax
	leal	1(%eax), %esi
	movb	%bl, buffer(%eax)
	jmp	.L135
.L137:
	movl	stderr, %edx
	leal	__stringlit_4, %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
	jmp	.L138
.L136:
	xorl	%edx, %edx
	movb	%dl, buffer(%esi)
	movl	$7, %eax
	movl	%eax, current_lexeme
	leal	buffer, %eax
	movl	%eax, 0(%esp)
	call	strdup
	movl	%eax, (current_lexeme + 4)
.L138:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_string, @function
	.size	get_string, . - get_string
	.text
	.align	16
	.globl get_lexeme
get_lexeme:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	current_lexeme, %eax
	testl	%eax, %eax
	jne	.L139
.L140:
	call	getchar
	movl	%eax, %ebx
	cmpl	$51, %ebx
	jae	.L141
	cmpl	$37, %ebx
	jae	.L142
	cmpl	$13, %ebx
	jae	.L143
	cmpl	$9, %ebx
	je	.L140
	cmpl	$10, %ebx
	je	.L140
	cmpl	$11, %ebx
	je	.L140
	jmp	.L144
.L143:
	cmpl	$13, %ebx
	je	.L140
	cmpl	$32, %ebx
	je	.L140
	cmpl	$34, %ebx
	jne	.L144
	movl	16(%esp), %ebx
	addl	$28, %esp
	jmp	get_string
.L142:
	cmpl	$48, %ebx
	jae	.L145
	cmpl	$37, %ebx
	je	.L146
	cmpl	$45, %ebx
	je	.L147
	cmpl	$47, %ebx
	jne	.L144
	movl	16(%esp), %ebx
	addl	$28, %esp
	jmp	get_binder
.L146:
	call	getchar
	cmpl	$10, %eax
	je	.L140
	cmpl	$-1, %eax
	jne	.L146
	jmp	.L140
.L145:
	cmpl	$48, %ebx
	je	.L147
	cmpl	$49, %ebx
	je	.L147
	jmp	.L147
.L141:
	cmpl	$57, %ebx
	jae	.L148
	cmpl	$54, %ebx
	jae	.L149
	cmpl	$51, %ebx
	je	.L147
	cmpl	$52, %ebx
	je	.L147
	jmp	.L147
.L149:
	cmpl	$54, %ebx
	je	.L147
	cmpl	$55, %ebx
	je	.L147
	jmp	.L147
.L148:
	cmpl	$123, %ebx
	jae	.L150
	cmpl	$57, %ebx
	je	.L147
	cmpl	$91, %ebx
	je	.L151
	cmpl	$93, %ebx
	jne	.L144
	movl	$11, %eax
	movl	%eax, current_lexeme
	jmp	.L139
.L151:
	movl	$10, %eax
	movl	%eax, current_lexeme
	jmp	.L139
.L147:
	movl	%ebx, 0(%esp)
	call	get_number
	jmp	.L139
.L150:
	cmpl	$123, %ebx
	je	.L152
	cmpl	$125, %ebx
	je	.L153
	cmpl	$-1, %ebx
	jne	.L144
	movl	$12, %eax
	movl	%eax, current_lexeme
	jmp	.L139
.L144:
	call	__ctype_b_loc
	movl	0(%eax), %edx
	movzwl	0(%edx,%ebx,2), %ecx
	testl	$1024, %ecx
	jne	.L154
	movl	stderr, %eax
	leal	__stringlit_5, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
	jmp	.L139
.L154:
	movl	%ebx, 0(%esp)
	call	get_ident
	jmp	.L139
.L153:
	movl	$9, %eax
	movl	%eax, current_lexeme
	jmp	.L139
.L152:
	movl	$8, %eax
	movl	%eax, current_lexeme
.L139:
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_lexeme, @function
	.size	get_lexeme, . - get_lexeme
	.text
	.align	16
	.globl discard_lexeme
discard_lexeme:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	xorl	%eax, %eax
	movl	%eax, current_lexeme
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	discard_lexeme, @function
	.size	discard_lexeme, . - discard_lexeme
	.data
	.align	4
operators:
	.long	__stringlit_58
	.long	4
	.long	1
	.long	__stringlit_57
	.long	4
	.long	0
	.long	__stringlit_56
	.long	1
	.long	8
	.long	__stringlit_55
	.long	1
	.long	9
	.long	__stringlit_54
	.long	1
	.long	10
	.long	__stringlit_53
	.long	1
	.long	11
	.long	__stringlit_52
	.long	1
	.long	12
	.long	__stringlit_51
	.long	1
	.long	13
	.long	__stringlit_50
	.long	1
	.long	14
	.long	__stringlit_49
	.long	1
	.long	15
	.long	__stringlit_48
	.long	1
	.long	16
	.long	__stringlit_47
	.long	1
	.long	17
	.long	__stringlit_46
	.long	1
	.long	18
	.long	__stringlit_45
	.long	1
	.long	19
	.long	__stringlit_44
	.long	1
	.long	20
	.long	__stringlit_43
	.long	1
	.long	21
	.long	__stringlit_42
	.long	1
	.long	22
	.long	__stringlit_41
	.long	1
	.long	23
	.long	__stringlit_40
	.long	1
	.long	24
	.long	__stringlit_39
	.long	1
	.long	25
	.long	__stringlit_38
	.long	1
	.long	26
	.long	__stringlit_37
	.long	1
	.long	27
	.long	__stringlit_36
	.long	1
	.long	28
	.long	__stringlit_35
	.long	1
	.long	29
	.long	__stringlit_34
	.long	1
	.long	30
	.long	__stringlit_33
	.long	1
	.long	31
	.long	__stringlit_32
	.long	1
	.long	32
	.long	__stringlit_31
	.long	1
	.long	33
	.long	__stringlit_30
	.long	1
	.long	34
	.long	__stringlit_29
	.long	1
	.long	35
	.long	__stringlit_28
	.long	1
	.long	36
	.long	__stringlit_27
	.long	1
	.long	37
	.long	__stringlit_26
	.long	1
	.long	38
	.long	__stringlit_25
	.long	1
	.long	39
	.long	__stringlit_24
	.long	1
	.long	40
	.long	__stringlit_23
	.long	1
	.long	41
	.long	__stringlit_22
	.long	1
	.long	42
	.long	__stringlit_21
	.long	1
	.long	43
	.long	__stringlit_20
	.long	1
	.long	44
	.long	__stringlit_19
	.long	1
	.long	45
	.long	__stringlit_18
	.long	1
	.long	46
	.long	__stringlit_17
	.long	1
	.long	47
	.long	__stringlit_16
	.long	1
	.long	48
	.long	__stringlit_15
	.long	1
	.long	49
	.long	__stringlit_14
	.long	1
	.long	50
	.long	__stringlit_13
	.long	1
	.long	51
	.long	__stringlit_12
	.long	1
	.long	52
	.long	__stringlit_11
	.long	1
	.long	53
	.long	__stringlit_10
	.long	1
	.long	54
	.long	__stringlit_9
	.long	1
	.long	55
	.long	__stringlit_8
	.long	1
	.long	56
	.long	__stringlit_7
	.long	1
	.long	57
	.long	__stringlit_6
	.long	1
	.long	58
	.type	operators, @object
	.size	operators, . - operators
	.text
	.align	16
	.globl init_lexer
init_lexer:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	xorl	%ebp, %ebp
.L155:
	cmpl	$53, %ebp
	jae	.L156
	leal	0(,%ebp,8), %ecx
	leal	0(%ecx,%ebp,4), %eax
	leal	operators(%eax), %edi
	movl	operators(%eax), %ecx
	movl	%ecx, 0(%esp)
	call	strlen
	leal	16(%eax), %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, %esi
	movl	0(%edi), %eax
	xorl	%ebx, %ebx
.L157:
	movsbl	0(%eax), %edx
	testl	%edx, %edx
	je	.L158
	movl	%ebx, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%ebx,1), %ecx
	leal	0(%ecx,%edx,1), %ebx
	leal	1(%eax), %eax
	jmp	.L157
.L158:
	andl	$255, %ebx
	movl	4(%edi), %ecx
	movl	%ecx, 0(%esi)
	leal	12(%esi), %eax
	movl	0(%edi), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	strcpy
	movl	8(%edi), %edx
	movl	%edx, 8(%esi)
	movl	hashtable(,%ebx,4), %ecx
	movl	%ecx, 4(%esi)
	movl	%esi, hashtable(,%ebx,4)
	leal	1(%ebp), %ebp
	jmp	.L155
.L156:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	init_lexer, @function
	.size	init_lexer, . - init_lexer
