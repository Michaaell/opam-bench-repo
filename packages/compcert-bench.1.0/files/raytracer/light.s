# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.text
	.align	16
	.globl dirlight
dirlight:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	$116, %edx
	movl	%edx, 0(%esp)
	call	arena_alloc
	movl	%eax, %ebx
	xorl	%ecx, %ecx
	movl	%ecx, 0(%ebx)
	leal	4(%ebx), %eax
	movl	%esi, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	leal	28(%ebx), %eax
	movl	%edi, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movl	%ebx, %eax
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	dirlight, @function
	.size	dirlight, . - dirlight
	.text
	.align	16
	.globl pointlight
pointlight:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	$116, %edx
	movl	%edx, 0(%esp)
	call	arena_alloc
	movl	%eax, %ebx
	movl	$1, %ecx
	movl	%ecx, 0(%ebx)
	leal	4(%ebx), %eax
	movl	%esi, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	leal	28(%ebx), %eax
	movl	%edi, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movl	%ebx, %eax
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pointlight, @function
	.size	pointlight, . - pointlight
	.text
	.align	16
	.globl spotlight
spotlight:
	.cfi_startproc
	subl	$76, %esp
	.cfi_adjust_cfa_offset	76
	leal	80(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %ebx
	movl	8(%edx), %edi
	movsd	12(%edx), %xmm2
	movsd	%xmm2, 40(%esp)
	movsd	20(%edx), %xmm2
	movsd	%xmm2, 32(%esp)
	movl	$116, %edx
	movl	%edx, 0(%esp)
	call	arena_alloc
	movl	%eax, %esi
	movl	$2, %ecx
	movl	%ecx, 0(%esi)
	leal	4(%esi), %eax
	movl	%ebp, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	leal	28(%esi), %eax
	movl	%ebx, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	leal	52(%esi), %eax
	movl	%edi, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	40(%esp), %xmm0
	movsd	%xmm0, 76(%esi)
	movsd	32(%esp), %xmm1
	movsd	%xmm1, 84(%esi)
	leal	48(%esp), %edx
	movl	%ebx, 0(%esp)
	movl	%ebp, 4(%esp)
	movl	%edx, 8(%esp)
	call	between
	leal	48(%esp), %edx
	leal	92(%esi), %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	vnormalize
	movl	%esi, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$76, %esp
	ret
	.cfi_endproc
	.type	spotlight, @function
	.size	spotlight, . - spotlight
	.text
	.align	16
color_from_light:
	.cfi_startproc
	subl	$220, %esp
	.cfi_adjust_cfa_offset	220
	leal	224(%esp), %edx
	movl	%edx, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	%ebp, 36(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 40(%esp)
	movl	4(%edx), %esi
	movl	8(%edx), %ecx
	movl	%ecx, 44(%esp)
	movl	12(%edx), %ecx
	movl	%ecx, 48(%esp)
	movsd	16(%edx), %xmm4
	movsd	%xmm4, 60(%esp)
	movsd	24(%edx), %xmm4
	movsd	%xmm4, 52(%esp)
	movsd	32(%edx), %xmm4
	movsd	%xmm4, 68(%esp)
	movl	40(%edx), %edi
	movl	44(%edx), %ebx
	movl	0(%edi), %eax
	testl	%eax, %eax
	je	.L471
	cmpl	$1, %eax
	je	.L472
	cmpl	$2, %eax
	jne	.L473
	leal	4(%edi), %ecx
	leal	120(%esp), %edx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, 8(%esp)
	call	between
	jmp	.L473
.L472:
	leal	4(%edi), %eax
	leal	120(%esp), %edx
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	between
	jmp	.L473
.L471:
	movsd	4(%edi), %xmm4
	xorpd	__negd_mask, %xmm4
	movsd	%xmm4, 120(%esp)
	movsd	12(%edi), %xmm3
	xorpd	__negd_mask, %xmm3
	movsd	%xmm3, 128(%esp)
	movsd	20(%edi), %xmm6
	xorpd	__negd_mask, %xmm6
	movsd	%xmm6, 136(%esp)
.L473:
	leal	120(%esp), %eax
	movl	%eax, 0(%esp)
	movl	48(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	dotproduct
	fstpl	76(%esp)
	movsd	76(%esp), %xmm5
	xorpd	%xmm4, %xmm4
	comisd	%xmm5, %xmm4
	jae	.L474
	leal	120(%esp), %edx
	xorl	%ecx, %ecx
	leal	88(%esp), %ebp
	movl	%esi, 0(%esp)
	movl	%edx, 4(%esp)
	movl	40(%esp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%ebp, 16(%esp)
	call	intersect_ray
	cmpl	$0, %eax
	je	.L475
	movl	0(%edi), %ecx
	testl	%ecx, %ecx
	je	.L474
	movsd	88(%esp), %xmm6
	movsd	.L476, %xmm3 # 1
	comisd	%xmm6, %xmm3
	jae	.L474
.L475:
	leal	120(%esp), %eax
	leal	144(%esp), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	vnormalize
	leal	192(%esp), %eax
	movl	44(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	vnormalize
	leal	144(%esp), %eax
	leal	192(%esp), %edx
	leal	168(%esp), %ebp
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ebp, 8(%esp)
	call	vsub
	leal	168(%esp), %eax
	leal	168(%esp), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	vnormalize
	movl	0(%edi), %eax
	testl	%eax, %eax
	je	.L477
	cmpl	$1, %eax
	je	.L478
	cmpl	$2, %eax
	jne	.L479
	leal	144(%esp), %edx
	leal	92(%edi), %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	dotproduct
	fstpl	40(%esp)
	movsd	40(%esp), %xmm2
	movsd	%xmm2, 0(%esp)
	call	acos
	fstpl	76(%esp)
	movsd	76(%esp), %xmm6
	movsd	76(%edi), %xmm2
	comisd	%xmm2, %xmm6
	jae	.L474
	movsd	84(%edi), %xmm0
	movsd	40(%esp), %xmm5
	movsd	%xmm5, 0(%esp)
	movsd	%xmm0, 8(%esp)
	call	pow
	fstpl	40(%esp)
	movsd	40(%esp), %xmm7
	movl	%esi, %eax
	movsd	4(%edi), %xmm0
	movsd	0(%eax), %xmm2
	subsd	%xmm2, %xmm0
	movsd	12(%edi), %xmm4
	movsd	8(%eax), %xmm3
	subsd	%xmm3, %xmm4
	movsd	20(%edi), %xmm6
	movsd	16(%eax), %xmm5
	subsd	%xmm5, %xmm6
	mulsd	%xmm0, %xmm0
	mulsd	%xmm4, %xmm4
	addsd	%xmm4, %xmm0
	mulsd	%xmm6, %xmm6
	addsd	%xmm6, %xmm0
	movsd	.L480, %xmm1 # 100
	movsd	.L481, %xmm2 # 99
	addsd	%xmm0, %xmm2
	divsd	%xmm2, %xmm1
	mulsd	%xmm1, %xmm7
	movsd	52(%edi), %xmm3
	mulsd	%xmm7, %xmm3
	movsd	%xmm3, 96(%esp)
	movsd	60(%edi), %xmm5
	mulsd	%xmm7, %xmm5
	movsd	%xmm5, 104(%esp)
	movsd	68(%edi), %xmm2
	mulsd	%xmm7, %xmm2
	movsd	%xmm2, 112(%esp)
	jmp	.L479
.L478:
	movl	%esi, %edx
	movsd	4(%edi), %xmm1
	movsd	0(%edx), %xmm2
	subsd	%xmm2, %xmm1
	movsd	12(%edi), %xmm5
	movsd	8(%edx), %xmm2
	subsd	%xmm2, %xmm5
	movsd	20(%edi), %xmm6
	movsd	16(%edx), %xmm7
	subsd	%xmm7, %xmm6
	mulsd	%xmm1, %xmm1
	mulsd	%xmm5, %xmm5
	addsd	%xmm5, %xmm1
	mulsd	%xmm6, %xmm6
	addsd	%xmm6, %xmm1
	movsd	.L482, %xmm2 # 100
	movsd	.L483, %xmm3 # 99
	addsd	%xmm1, %xmm3
	divsd	%xmm3, %xmm2
	movsd	28(%edi), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, 96(%esp)
	movsd	36(%edi), %xmm4
	mulsd	%xmm2, %xmm4
	movsd	%xmm4, 104(%esp)
	movsd	44(%edi), %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, 112(%esp)
	jmp	.L479
.L477:
	leal	96(%esp), %eax
	leal	28(%edi), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
.L479:
	leal	144(%esp), %ecx
	movl	48(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	dotproduct
	fstpl	40(%esp)
	leal	168(%esp), %ecx
	movl	48(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	dotproduct
	fstpl	76(%esp)
	movsd	76(%esp), %xmm6
	movsd	%xmm6, 0(%esp)
	movsd	68(%esp), %xmm1
	movsd	%xmm1, 8(%esp)
	call	pow
	fstpl	68(%esp)
	movsd	68(%esp), %xmm2
	movsd	60(%esp), %xmm3
	movsd	40(%esp), %xmm0
	mulsd	%xmm0, %xmm3
	movsd	52(%esp), %xmm1
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm3
	movsd	0(%ebx), %xmm7
	movsd	96(%esp), %xmm5
	movapd	%xmm3, %xmm4
	mulsd	%xmm5, %xmm4
	addsd	%xmm4, %xmm7
	movsd	%xmm7, 0(%ebx)
	movsd	8(%ebx), %xmm5
	movsd	104(%esp), %xmm7
	movapd	%xmm3, %xmm6
	mulsd	%xmm7, %xmm6
	addsd	%xmm6, %xmm5
	movsd	%xmm5, 8(%ebx)
	movsd	16(%ebx), %xmm1
	movsd	112(%esp), %xmm5
	mulsd	%xmm5, %xmm3
	addsd	%xmm3, %xmm1
	movsd	%xmm1, 16(%ebx)
.L474:
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	movl	32(%esp), %edi
	movl	36(%esp), %ebp
	addl	$220, %esp
	ret
	.cfi_endproc
	.type	color_from_light, @function
	.size	color_from_light, . - color_from_light
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L483:	.quad	0x4058c00000000000
.L482:	.quad	0x4059000000000000
.L481:	.quad	0x4058c00000000000
.L480:	.quad	0x4059000000000000
.L476:	.quad	0x3ff0000000000000
	.text
	.align	16
	.globl color_from_lights
color_from_lights:
	.cfi_startproc
	subl	$116, %esp
	.cfi_adjust_cfa_offset	116
	leal	120(%esp), %edx
	movl	%edx, 48(%esp)
	movl	%ebx, 52(%esp)
	movl	%esi, 56(%esp)
	movl	%edi, 60(%esp)
	movl	%ebp, 64(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %edx
	movl	%edx, 72(%esp)
	movl	48(%esp), %edx
	movl	8(%edx), %edx
	movl	%edx, 96(%esp)
	movl	48(%esp), %edx
	movl	12(%edx), %edx
	movl	%edx, 92(%esp)
	movl	48(%esp), %edx
	movsd	16(%edx), %xmm1
	movsd	%xmm1, 84(%esp)
	movsd	24(%edx), %xmm1
	movsd	%xmm1, 100(%esp)
	movsd	32(%edx), %xmm1
	movsd	%xmm1, 76(%esp)
	movl	40(%edx), %esi
	movl	44(%edx), %ebx
	xorpd	%xmm0, %xmm0
	movsd	%xmm0, 16(%ebx)
	movsd	%xmm0, 8(%ebx)
	movsd	%xmm0, 0(%ebx)
	xorl	%ebp, %ebp
.L484:
	movl	0(%esi,%ebp,4), %ecx
	cmpl	$0, %ecx
	je	.L485
	movl	%edi, 0(%esp)
	movl	72(%esp), %eax
	movl	%eax, 4(%esp)
	movl	96(%esp), %eax
	movl	%eax, 8(%esp)
	movl	92(%esp), %eax
	movl	%eax, 12(%esp)
	movsd	84(%esp), %xmm2
	movsd	%xmm2, 16(%esp)
	movsd	100(%esp), %xmm2
	movsd	%xmm2, 24(%esp)
	movsd	76(%esp), %xmm2
	movsd	%xmm2, 32(%esp)
	movl	%ecx, 40(%esp)
	movl	%ebx, 44(%esp)
	call	color_from_light
	leal	1(%ebp), %ebp
	jmp	.L484
.L485:
	movl	52(%esp), %ebx
	movl	56(%esp), %esi
	movl	60(%esp), %edi
	movl	64(%esp), %ebp
	addl	$116, %esp
	ret
	.cfi_endproc
	.type	color_from_lights, @function
	.size	color_from_lights, . - color_from_lights
	.section	.rodata
	.align	16
__negd_mask:	.quad   0x8000000000000000, 0
__absd_mask:	.quad   0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF
__negs_mask:	.long   0x80000000, 0, 0, 0
__abss_mask:	.long   0x7FFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
