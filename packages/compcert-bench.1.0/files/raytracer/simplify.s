# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.data
	.align	4
__huge_val:
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	240
	.byte	127
	.type	__huge_val, @object
	.size	__huge_val, . - __huge_val
	.data
	.align	4
cone_radius:
	.quad	4607182418800017408 # 1
	.type	cone_radius, @object
	.size	cone_radius, . - cone_radius
	.data
	.align	4
cube_radius:
	.quad	4605975682916830378 # 0.866025403784438597
	.type	cube_radius, @object
	.size	cube_radius, . - cube_radius
	.data
	.align	4
cylinder_radius:
	.quad	4607713996627768488 # 1.1180339887498949
	.type	cylinder_radius, @object
	.size	cylinder_radius, . - cylinder_radius
	.data
	.align	4
sphere_radius:
	.quad	4607182418800017408 # 1
	.type	sphere_radius, @object
	.size	sphere_radius, . - sphere_radius
	.data
	.align	4
cone_center:
	.quad	0 # 0
	.quad	4607182418800017408 # 1
	.quad	0 # 0
	.type	cone_center, @object
	.size	cone_center, . - cone_center
	.data
	.align	4
cube_center:
	.quad	4602678819172646912 # 0.5
	.quad	4602678819172646912 # 0.5
	.quad	4602678819172646912 # 0.5
	.type	cube_center, @object
	.size	cube_center, . - cube_center
	.data
	.align	4
cylinder_center:
	.quad	0 # 0
	.quad	4602678819172646912 # 0.5
	.quad	0 # 0
	.type	cylinder_center, @object
	.size	cylinder_center, . - cylinder_center
	.data
	.align	4
sphere_center:
	.quad	0 # 0
	.quad	0 # 0
	.quad	0 # 0
	.type	sphere_center, @object
	.size	sphere_center, . - sphere_center
	.data
	.align	4
plane_center:
	.quad	0 # 0
	.quad	0 # 0
	.quad	0 # 0
	.type	plane_center, @object
	.size	plane_center, . - plane_center
	.data
	.align	4
origin:
	.quad	0 # 0
	.quad	0 # 0
	.quad	0 # 0
	.type	origin, @object
	.size	origin, . - origin
	.text
	.align	16
	.globl compute_bounding_spheres
compute_bounding_spheres:
	.cfi_startproc
	subl	$92, %esp
	.cfi_adjust_cfa_offset	92
	leal	96(%esp), %edx
	movl	%edx, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	%ebp, 36(%esp)
	movl	0(%edx), %esi
	movsd	60(%esi), %xmm2
	xorpd	%xmm3, %xmm3
	comisd	%xmm3, %xmm2
	jae	.L486
	movl	0(%esi), %eax
	cmpl	$8, %eax
	jae	.L486
	jmp	*.L487(, %eax, 4)
.L488:
	movl	16(%esi), %edx
	leal	cone_center, %ecx
	leal	36(%esi), %eax
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	call	apply_to_point
	movsd	20(%esi), %xmm5
	movsd	cone_radius, %xmm6
	mulsd	%xmm6, %xmm5
	movsd	%xmm5, 60(%esi)
	jmp	.L486
.L489:
	movl	16(%esi), %ebx
	leal	cube_center, %eax
	leal	36(%esi), %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	apply_to_point
	movsd	20(%esi), %xmm4
	movsd	cube_radius, %xmm1
	mulsd	%xmm1, %xmm4
	movsd	%xmm4, 60(%esi)
	jmp	.L486
.L490:
	movl	16(%esi), %eax
	leal	cylinder_center, %edx
	leal	36(%esi), %ecx
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	apply_to_point
	movsd	20(%esi), %xmm6
	movsd	cylinder_radius, %xmm7
	mulsd	%xmm7, %xmm6
	movsd	%xmm6, 60(%esi)
	jmp	.L486
.L491:
	leal	36(%esi), %eax
	leal	plane_center, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	__huge_val, %xmm4
	movsd	%xmm4, 60(%esi)
	jmp	.L486
.L492:
	movl	16(%esi), %ecx
	leal	sphere_center, %edx
	leal	36(%esi), %ebx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	apply_to_point
	movsd	20(%esi), %xmm2
	movsd	sphere_radius, %xmm7
	mulsd	%xmm7, %xmm2
	movsd	%xmm2, 60(%esi)
	jmp	.L486
.L493:
	movl	28(%esi), %ecx
	movl	%ecx, 0(%esp)
	call	compute_bounding_spheres
	movl	32(%esi), %ecx
	movl	%ecx, 0(%esp)
	call	compute_bounding_spheres
	movl	28(%esi), %edi
	movl	32(%esi), %ebx
	movsd	60(%edi), %xmm3
	movsd	__huge_val, %xmm0
	comisd	%xmm0, %xmm3
	jae	.L494
	movsd	60(%ebx), %xmm7
	comisd	%xmm0, %xmm7
	jae	.L494
	leal	36(%edi), %ecx
	leal	36(%ebx), %edx
	leal	64(%esp), %eax
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, 8(%esp)
	call	between
	leal	64(%esp), %eax
	movl	%eax, 0(%esp)
	call	vlength2
	fstpl	40(%esp)
	movsd	40(%esp), %xmm7
	movsd	60(%ebx), %xmm1
	movsd	60(%edi), %xmm3
	movapd	%xmm1, %xmm4
	subsd	%xmm3, %xmm4
	movsd	%xmm4, 48(%esp)
	movsd	48(%esp), %xmm2
	mulsd	%xmm2, %xmm2
	comisd	%xmm7, %xmm2
	jb	.L495
	comisd	%xmm3, %xmm1
	jae	.L496
	leal	36(%esi), %eax
	leal	36(%edi), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%edi), %xmm0
	movsd	%xmm0, 60(%esi)
	movsd	__huge_val, %xmm1
	movsd	%xmm1, 60(%edi)
	jmp	.L486
.L496:
	leal	36(%esi), %eax
	leal	36(%ebx), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%ebx), %xmm1
	movsd	%xmm1, 60(%esi)
	movsd	__huge_val, %xmm4
	movsd	%xmm4, 60(%ebx)
	jmp	.L486
.L495:
	movsd	%xmm7, 0(%esp)
	call	sqrt
	fstpl	40(%esp)
	movsd	40(%esp), %xmm0
	addsd	%xmm0, %xmm0
	movsd	48(%esp), %xmm4
	divsd	%xmm0, %xmm4
	movsd	.L497, %xmm6 # 0.5
	addsd	%xmm6, %xmm4
	leal	36(%edi), %ecx
	leal	64(%esp), %ebp
	leal	36(%esi), %eax
	movl	%ecx, 0(%esp)
	movl	%ebp, 4(%esp)
	movsd	%xmm4, 8(%esp)
	movl	%eax, 16(%esp)
	call	point_along
	movsd	60(%edi), %xmm1
	movsd	40(%esp), %xmm6
	addsd	%xmm1, %xmm6
	movsd	60(%ebx), %xmm7
	addsd	%xmm7, %xmm6
	movsd	.L498, %xmm4 # 0.5
	mulsd	%xmm4, %xmm6
	movsd	%xmm6, 60(%esi)
	jmp	.L486
.L494:
	movsd	__huge_val, %xmm6
	movsd	%xmm6, 60(%esi)
	jmp	.L486
.L499:
	movl	28(%esi), %edx
	movl	%edx, 0(%esp)
	call	compute_bounding_spheres
	movl	32(%esi), %eax
	movl	%eax, 0(%esp)
	call	compute_bounding_spheres
	movl	28(%esi), %edi
	movl	32(%esi), %ebx
	movsd	60(%edi), %xmm3
	movsd	__huge_val, %xmm2
	comisd	%xmm2, %xmm3
	jb	.L500
	leal	36(%esi), %eax
	leal	36(%ebx), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%ebx), %xmm3
	movsd	%xmm3, 60(%esi)
	jmp	.L486
.L500:
	movsd	60(%ebx), %xmm3
	comisd	%xmm2, %xmm3
	jb	.L501
	leal	36(%esi), %eax
	leal	36(%edi), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%edi), %xmm5
	movsd	%xmm5, 60(%esi)
	jmp	.L486
.L501:
	leal	36(%edi), %ebp
	leal	36(%ebx), %eax
	leal	64(%esp), %ecx
	movl	%ebp, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, 8(%esp)
	call	between
	leal	64(%esp), %eax
	movl	%eax, 0(%esp)
	call	vlength2
	fstpl	48(%esp)
	movsd	60(%edi), %xmm6
	movsd	60(%ebx), %xmm5
	movapd	%xmm6, %xmm7
	subsd	%xmm5, %xmm7
	mulsd	%xmm7, %xmm7
	movsd	48(%esp), %xmm1
	comisd	%xmm1, %xmm7
	jb	.L502
	comisd	%xmm5, %xmm6
	jae	.L503
	leal	36(%esi), %eax
	leal	36(%edi), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%edi), %xmm5
	movsd	%xmm5, 60(%esi)
	movsd	__huge_val, %xmm0
	movsd	%xmm0, 60(%edi)
	jmp	.L486
.L503:
	leal	36(%esi), %eax
	leal	36(%ebx), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%ebx), %xmm6
	movsd	%xmm6, 60(%esi)
	movsd	__huge_val, %xmm6
	movsd	%xmm6, 60(%ebx)
	jmp	.L486
.L502:
	movapd	%xmm6, %xmm7
	addsd	%xmm5, %xmm7
	mulsd	%xmm7, %xmm7
	movsd	48(%esp), %xmm2
	comisd	%xmm7, %xmm2
	jbe	.L504
	leal	36(%esi), %eax
	leal	origin, %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	xorpd	%xmm0, %xmm0
	movsd	%xmm0, 60(%esi)
	jmp	.L486
.L504:
	movapd	%xmm6, %xmm7
	mulsd	%xmm7, %xmm6
	movapd	%xmm5, %xmm3
	mulsd	%xmm5, %xmm3
	subsd	%xmm3, %xmm6
	movsd	48(%esp), %xmm3
	comisd	%xmm3, %xmm6
	jb	.L505
	leal	36(%esi), %eax
	leal	36(%ebx), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%ebx), %xmm7
	movsd	%xmm7, 60(%esi)
	movsd	__huge_val, %xmm0
	movsd	%xmm0, 60(%ebx)
	jmp	.L486
.L505:
	xorpd	__negd_mask, %xmm6
	comisd	%xmm3, %xmm6
	jb	.L506
	leal	36(%esi), %eax
	leal	36(%edi), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%edi), %xmm5
	movsd	%xmm5, 60(%esi)
	movsd	__huge_val, %xmm0
	movsd	%xmm0, 60(%edi)
	jmp	.L486
.L506:
	movsd	%xmm3, 0(%esp)
	call	sqrt
	fstpl	40(%esp)
	movsd	60(%edi), %xmm2
	movsd	40(%esp), %xmm5
	movapd	%xmm2, %xmm0
	addsd	%xmm5, %xmm0
	movsd	60(%ebx), %xmm4
	movapd	%xmm0, %xmm3
	addsd	%xmm4, %xmm3
	subsd	%xmm4, %xmm0
	movsd	40(%esp), %xmm7
	movapd	%xmm4, %xmm6
	addsd	%xmm7, %xmm6
	subsd	%xmm2, %xmm6
	addsd	%xmm4, %xmm2
	movsd	40(%esp), %xmm1
	subsd	%xmm1, %xmm2
	mulsd	%xmm0, %xmm3
	mulsd	%xmm6, %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, 0(%esp)
	call	sqrt
	fstpl	56(%esp)
	movsd	56(%esp), %xmm0
	movsd	40(%esp), %xmm3
	addsd	%xmm3, %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm0, 40(%esp)
	movsd	60(%edi), %xmm4
	movapd	%xmm4, %xmm7
	mulsd	%xmm4, %xmm7
	movsd	60(%ebx), %xmm3
	movapd	%xmm3, %xmm4
	mulsd	%xmm4, %xmm3
	subsd	%xmm3, %xmm7
	movsd	48(%esp), %xmm0
	addsd	%xmm0, %xmm0
	divsd	%xmm0, %xmm7
	movsd	.L507, %xmm0 # 0.5
	addsd	%xmm0, %xmm7
	leal	36(%edi), %eax
	leal	64(%esp), %ebx
	leal	36(%esi), %edx
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	movsd	%xmm7, 8(%esp)
	movl	%edx, 16(%esp)
	call	point_along
	movsd	40(%esp), %xmm2
	movsd	%xmm2, 60(%esi)
	jmp	.L486
.L508:
	movl	28(%esi), %eax
	movl	%eax, 0(%esp)
	call	compute_bounding_spheres
	movl	32(%esi), %ecx
	movl	%ecx, 0(%esp)
	call	compute_bounding_spheres
	movl	28(%esi), %ebx
	leal	36(%esi), %eax
	leal	36(%ebx), %edx
# begin builtin __builtin_memcpy_aligned, size = 24, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movq	8(%edx), %xmm7
	movq	%xmm7, 8(%eax)
	movq	16(%edx), %xmm7
	movq	%xmm7, 16(%eax)
# end builtin __builtin_memcpy_aligned
	movsd	60(%ebx), %xmm2
	movsd	%xmm2, 60(%esi)
	movsd	__huge_val, %xmm3
	movsd	%xmm3, 60(%ebx)
.L486:
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	movl	32(%esp), %edi
	movl	36(%esp), %ebp
	addl	$92, %esp
	ret
	.cfi_endproc
	.type	compute_bounding_spheres, @function
	.size	compute_bounding_spheres, . - compute_bounding_spheres
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L507:	.quad	0x3fe0000000000000
.L498:	.quad	0x3fe0000000000000
.L497:	.quad	0x3fe0000000000000
	.text
	.align	4
.L487:	.long	.L488
	.long	.L489
	.long	.L490
	.long	.L491
	.long	.L492
	.long	.L493
	.long	.L499
	.long	.L508
	.section	.rodata
	.align	16
__negd_mask:	.quad   0x8000000000000000, 0
__absd_mask:	.quad   0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF
__negs_mask:	.long   0x80000000, 0, 0, 0
__abss_mask:	.long   0x7FFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
