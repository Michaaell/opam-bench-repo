# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"Out of memory\012\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"Memory request too large (%d)\012\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.comm	arena_head, 4, 4
	.comm	arena_cur, 4, 4
	.comm	arena_cur_ofs, 4, 4
	.text
	.align	16
	.globl arena_init
arena_init:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	$1024004, %edx
	movl	%edx, 0(%esp)
	call	malloc
	movl	%eax, arena_head
	cmpl	$0, %eax
	jne	.L100
	movl	stderr, %ecx
	leal	__stringlit_1, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L100:
	movl	arena_head, %edx
	xorl	%eax, %eax
	movl	%eax, 0(%edx)
	movl	arena_head, %eax
	movl	%eax, arena_cur
	xorl	%eax, %eax
	movl	%eax, arena_cur_ofs
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	arena_init, @function
	.size	arena_init, . - arena_init
	.text
	.align	16
	.globl arena_clear
arena_clear:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	arena_head, %eax
	movl	%eax, arena_cur
	xorl	%eax, %eax
	movl	%eax, arena_cur_ofs
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	arena_clear, @function
	.size	arena_clear, . - arena_clear
	.text
	.align	16
	.globl arena_alloc
arena_alloc:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %esi
	cmpl	$1024000, %esi
	jl	.L101
	movl	stderr, %ecx
	leal	__stringlit_2, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	call	fprintf
	movl	$2, %eax
	movl	%eax, 0(%esp)
	call	exit
.L101:
	movl	arena_cur_ofs, %edx
	leal	0(%edx,%esi,1), %ecx
	cmpl	$1024000, %ecx
	jg	.L102
	movl	arena_cur, %eax
	leal	4(%eax,%edx,1), %eax
	movl	%ecx, arena_cur_ofs
	jmp	.L103
.L102:
	movl	arena_cur, %edx
	movl	0(%edx), %edx
	cmpl	$0, %edx
	jne	.L104
	movl	$1024004, %ecx
	movl	%ecx, 0(%esp)
	call	malloc
	movl	%eax, %ebx
	cmpl	$0, %ebx
	jne	.L105
	movl	stderr, %ecx
	leal	__stringlit_1, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	movl	$2, %ecx
	movl	%ecx, 0(%esp)
	call	exit
.L105:
	xorl	%eax, %eax
	movl	%eax, 0(%ebx)
	movl	arena_cur, %edx
	movl	%ebx, 0(%edx)
.L104:
	movl	arena_cur, %edx
	movl	0(%edx), %edx
	movl	%edx, arena_cur
	movl	%esi, arena_cur_ofs
	leal	4(%edx), %eax
.L103:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	arena_alloc, @function
	.size	arena_alloc, . - arena_alloc
