# File generated by CompCert 2.4
# Command line: -stdlib /home/michael/.opam/4.02.1/lib/compcert/ -fstruct-return -dasm -lcompcert -I /home/michael/.opam/4.02.1/share/compcert-bench/raytracer /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/memory.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmllexer.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/gmlparser.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/eval.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/arrays.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/vector.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/matrix.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/object.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/intersect.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/surface.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/light.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/simplify.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/render.c /home/michael/.opam/4.02.1/share/compcert-bench/raytracer/main.c -lm
	.section	.rodata
	.align	1
__stringlit_19:
	.ascii	"plane\000"
	.type	__stringlit_19, @object
	.size	__stringlit_19, . - __stringlit_19
	.section	.rodata
	.align	1
__stringlit_25:
	.ascii	"light\000"
	.type	__stringlit_25, @object
	.size	__stringlit_25, . - __stringlit_25
	.section	.rodata
	.align	1
__stringlit_40:
	.ascii	"divi\000"
	.type	__stringlit_40, @object
	.size	__stringlit_40, . - __stringlit_40
	.section	.rodata
	.align	1
__stringlit_16:
	.ascii	"real\000"
	.type	__stringlit_16, @object
	.size	__stringlit_16, . - __stringlit_16
	.section	.rodata
	.align	1
__stringlit_14:
	.ascii	"rotatex\000"
	.type	__stringlit_14, @object
	.size	__stringlit_14, . - __stringlit_14
	.section	.rodata
	.align	1
__stringlit_73:
	.ascii	"Square root of negative number\012\000"
	.type	__stringlit_73, @object
	.size	__stringlit_73, . - __stringlit_73
	.section	.rodata
	.align	1
__stringlit_12:
	.ascii	"rotatez\000"
	.type	__stringlit_12, @object
	.size	__stringlit_12, . - __stringlit_12
	.section	.rodata
	.align	1
__stringlit_57:
	.ascii	"<Boolean>\000"
	.type	__stringlit_57, @object
	.size	__stringlit_57, . - __stringlit_57
	.section	.rodata
	.align	1
__stringlit_68:
	.ascii	"%d\012\000"
	.type	__stringlit_68, @object
	.size	__stringlit_68, . - __stringlit_68
	.section	.rodata
	.align	1
__stringlit_72:
	.ascii	"(operation: %s, PC: %d)\012\000"
	.type	__stringlit_72, @object
	.size	__stringlit_72, . - __stringlit_72
	.section	.rodata
	.align	1
__stringlit_18:
	.ascii	"point\000"
	.type	__stringlit_18, @object
	.size	__stringlit_18, . - __stringlit_18
	.section	.rodata
	.align	1
__stringlit_5:
	.ascii	"subf\000"
	.type	__stringlit_5, @object
	.size	__stringlit_5, . - __stringlit_5
	.section	.rodata
	.align	1
__stringlit_13:
	.ascii	"rotatey\000"
	.type	__stringlit_13, @object
	.size	__stringlit_13, . - __stringlit_13
	.section	.rodata
	.align	1
__stringlit_22:
	.ascii	"mulf\000"
	.type	__stringlit_22, @object
	.size	__stringlit_22, . - __stringlit_22
	.section	.rodata
	.align	1
__stringlit_31:
	.ascii	"getz\000"
	.type	__stringlit_31, @object
	.size	__stringlit_31, . - __stringlit_31
	.section	.rodata
	.align	1
__stringlit_78:
	.ascii	"Stack overflow\012\000"
	.type	__stringlit_78, @object
	.size	__stringlit_78, . - __stringlit_78
	.section	.rodata
	.align	1
__stringlit_10:
	.ascii	"sin\000"
	.type	__stringlit_10, @object
	.size	__stringlit_10, . - __stringlit_10
	.section	.rodata
	.align	1
__stringlit_17:
	.ascii	"pointlight\000"
	.type	__stringlit_17, @object
	.size	__stringlit_17, . - __stringlit_17
	.section	.rodata
	.align	1
__stringlit_63:
	.ascii	"point %e %e %e\012\000"
	.type	__stringlit_63, @object
	.size	__stringlit_63, . - __stringlit_63
	.section	.rodata
	.align	1
__stringlit_29:
	.ascii	"intersect\000"
	.type	__stringlit_29, @object
	.size	__stringlit_29, . - __stringlit_29
	.section	.rodata
	.align	1
__stringlit_21:
	.ascii	"negi\000"
	.type	__stringlit_21, @object
	.size	__stringlit_21, . - __stringlit_21
	.section	.rodata
	.align	1
__stringlit_62:
	.ascii	"object\012\000"
	.type	__stringlit_62, @object
	.size	__stringlit_62, . - __stringlit_62
	.section	.rodata
	.align	1
__stringlit_70:
	.ascii	"true\000"
	.type	__stringlit_70, @object
	.size	__stringlit_70, . - __stringlit_70
	.section	.rodata
	.align	1
__stringlit_4:
	.ascii	"translate\000"
	.type	__stringlit_4, @object
	.size	__stringlit_4, . - __stringlit_4
	.section	.rodata
	.align	1
__stringlit_80:
	.ascii	"Wrong result for surface function\012\000"
	.type	__stringlit_80, @object
	.size	__stringlit_80, . - __stringlit_80
	.section	.rodata
	.align	1
__stringlit_28:
	.ascii	"length\000"
	.type	__stringlit_28, @object
	.size	__stringlit_28, . - __stringlit_28
	.section	.rodata
	.align	1
__stringlit_39:
	.ascii	"divf\000"
	.type	__stringlit_39, @object
	.size	__stringlit_39, . - __stringlit_39
	.section	.rodata
	.align	1
__stringlit_77:
	.ascii	"Stack underflow\012\000"
	.type	__stringlit_77, @object
	.size	__stringlit_77, . - __stringlit_77
	.section	.rodata
	.align	1
__stringlit_6:
	.ascii	"subi\000"
	.type	__stringlit_6, @object
	.size	__stringlit_6, . - __stringlit_6
	.section	.rodata
	.align	1
__stringlit_65:
	.ascii	"array\012\000"
	.type	__stringlit_65, @object
	.size	__stringlit_65, . - __stringlit_65
	.section	.rodata
	.align	1
__stringlit_64:
	.ascii	"closure\012\000"
	.type	__stringlit_64, @object
	.size	__stringlit_64, . - __stringlit_64
	.section	.rodata
	.align	1
__stringlit_7:
	.ascii	"sqrt\000"
	.type	__stringlit_7, @object
	.size	__stringlit_7, . - __stringlit_7
	.section	.rodata
	.align	1
__stringlit_61:
	.ascii	"light\012\000"
	.type	__stringlit_61, @object
	.size	__stringlit_61, . - __stringlit_61
	.section	.rodata
	.align	1
__stringlit_55:
	.ascii	"<Real>\000"
	.type	__stringlit_55, @object
	.size	__stringlit_55, . - __stringlit_55
	.section	.rodata
	.align	1
__stringlit_79:
	.ascii	"Unbound identifier %s\012\000"
	.type	__stringlit_79, @object
	.size	__stringlit_79, . - __stringlit_79
	.section	.rodata
	.align	1
__stringlit_1:
	.ascii	"print\000"
	.type	__stringlit_1, @object
	.size	__stringlit_1, . - __stringlit_1
	.section	.rodata
	.align	1
__stringlit_54:
	.ascii	"<String>\000"
	.type	__stringlit_54, @object
	.size	__stringlit_54, . - __stringlit_54
	.section	.rodata
	.align	1
__stringlit_67:
	.ascii	"%e\012\000"
	.type	__stringlit_67, @object
	.size	__stringlit_67, . - __stringlit_67
	.section	.rodata
	.align	1
__stringlit_35:
	.ascii	"frac\000"
	.type	__stringlit_35, @object
	.size	__stringlit_35, . - __stringlit_35
	.section	.rodata
	.align	1
__stringlit_24:
	.ascii	"modi\000"
	.type	__stringlit_24, @object
	.size	__stringlit_24, . - __stringlit_24
	.section	.rodata
	.align	1
__stringlit_44:
	.ascii	"cos\000"
	.type	__stringlit_44, @object
	.size	__stringlit_44, . - __stringlit_44
	.section	.rodata
	.align	1
__stringlit_46:
	.ascii	"clampf\000"
	.type	__stringlit_46, @object
	.size	__stringlit_46, . - __stringlit_46
	.section	.rodata
	.align	1
__stringlit_59:
	.ascii	"<Identifier>\000"
	.type	__stringlit_59, @object
	.size	__stringlit_59, . - __stringlit_59
	.section	.rodata
	.align	1
__stringlit_26:
	.ascii	"lessf\000"
	.type	__stringlit_26, @object
	.size	__stringlit_26, . - __stringlit_26
	.section	.rodata
	.align	1
__stringlit_20:
	.ascii	"negf\000"
	.type	__stringlit_20, @object
	.size	__stringlit_20, . - __stringlit_20
	.section	.rodata
	.align	1
__stringlit_27:
	.ascii	"lessi\000"
	.type	__stringlit_27, @object
	.size	__stringlit_27, . - __stringlit_27
	.section	.rodata
	.align	1
__stringlit_38:
	.ascii	"eqi\000"
	.type	__stringlit_38, @object
	.size	__stringlit_38, . - __stringlit_38
	.section	.rodata
	.align	1
__stringlit_50:
	.ascii	"addi\000"
	.type	__stringlit_50, @object
	.size	__stringlit_50, . - __stringlit_50
	.section	.rodata
	.align	1
__stringlit_74:
	.ascii	"Out-of-bound array access\012\000"
	.type	__stringlit_74, @object
	.size	__stringlit_74, . - __stringlit_74
	.section	.rodata
	.align	1
__stringlit_3:
	.ascii	"union\000"
	.type	__stringlit_3, @object
	.size	__stringlit_3, . - __stringlit_3
	.section	.rodata
	.align	1
__stringlit_15:
	.ascii	"render\000"
	.type	__stringlit_15, @object
	.size	__stringlit_15, . - __stringlit_15
	.section	.rodata
	.align	1
__stringlit_60:
	.ascii	"Light expected in array argument to `render'\012\000"
	.type	__stringlit_60, @object
	.size	__stringlit_60, . - __stringlit_60
	.section	.rodata
	.align	1
__stringlit_8:
	.ascii	"spotlight\000"
	.type	__stringlit_8, @object
	.size	__stringlit_8, . - __stringlit_8
	.section	.rodata
	.align	1
__stringlit_45:
	.ascii	"cone\000"
	.type	__stringlit_45, @object
	.size	__stringlit_45, . - __stringlit_45
	.section	.rodata
	.align	1
__stringlit_9:
	.ascii	"sphere\000"
	.type	__stringlit_9, @object
	.size	__stringlit_9, . - __stringlit_9
	.section	.rodata
	.align	1
__stringlit_41:
	.ascii	"difference\000"
	.type	__stringlit_41, @object
	.size	__stringlit_41, . - __stringlit_41
	.section	.rodata
	.align	1
__stringlit_42:
	.ascii	"cylinder\000"
	.type	__stringlit_42, @object
	.size	__stringlit_42, . - __stringlit_42
	.section	.rodata
	.align	1
__stringlit_56:
	.ascii	"<Integer>\000"
	.type	__stringlit_56, @object
	.size	__stringlit_56, . - __stringlit_56
	.section	.rodata
	.align	1
__stringlit_66:
	.ascii	"\042%s\042\012\000"
	.type	__stringlit_66, @object
	.size	__stringlit_66, . - __stringlit_66
	.section	.rodata
	.align	1
__stringlit_47:
	.ascii	"asin\000"
	.type	__stringlit_47, @object
	.size	__stringlit_47, . - __stringlit_47
	.section	.rodata
	.align	1
__stringlit_49:
	.ascii	"addf\000"
	.type	__stringlit_49, @object
	.size	__stringlit_49, . - __stringlit_49
	.section	.rodata
	.align	1
__stringlit_58:
	.ascii	"<Binder>\000"
	.type	__stringlit_58, @object
	.size	__stringlit_58, . - __stringlit_58
	.section	.rodata
	.align	1
__stringlit_23:
	.ascii	"muli\000"
	.type	__stringlit_23, @object
	.size	__stringlit_23, . - __stringlit_23
	.section	.rodata
	.align	1
__stringlit_32:
	.ascii	"gety\000"
	.type	__stringlit_32, @object
	.size	__stringlit_32, . - __stringlit_32
	.section	.rodata
	.align	1
__stringlit_36:
	.ascii	"floor\000"
	.type	__stringlit_36, @object
	.size	__stringlit_36, . - __stringlit_36
	.section	.rodata
	.align	1
__stringlit_69:
	.ascii	"false\000"
	.type	__stringlit_69, @object
	.size	__stringlit_69, . - __stringlit_69
	.section	.rodata
	.align	1
__stringlit_75:
	.ascii	"Division by zero\012\000"
	.type	__stringlit_75, @object
	.size	__stringlit_75, . - __stringlit_75
	.section	.rodata
	.align	1
__stringlit_30:
	.ascii	"if\000"
	.type	__stringlit_30, @object
	.size	__stringlit_30, . - __stringlit_30
	.section	.rodata
	.align	1
__stringlit_34:
	.ascii	"get\000"
	.type	__stringlit_34, @object
	.size	__stringlit_34, . - __stringlit_34
	.section	.rodata
	.align	1
__stringlit_2:
	.ascii	"uscale\000"
	.type	__stringlit_2, @object
	.size	__stringlit_2, . - __stringlit_2
	.section	.rodata
	.align	1
__stringlit_43:
	.ascii	"cube\000"
	.type	__stringlit_43, @object
	.size	__stringlit_43, . - __stringlit_43
	.section	.rodata
	.align	1
__stringlit_52:
	.ascii	"<Function>\000"
	.type	__stringlit_52, @object
	.size	__stringlit_52, . - __stringlit_52
	.section	.rodata
	.align	1
__stringlit_71:
	.ascii	"%s\012\000"
	.type	__stringlit_71, @object
	.size	__stringlit_71, . - __stringlit_71
	.section	.rodata
	.align	1
__stringlit_76:
	.ascii	"Type error\012\000"
	.type	__stringlit_76, @object
	.size	__stringlit_76, . - __stringlit_76
	.section	.rodata
	.align	1
__stringlit_11:
	.ascii	"scale\000"
	.type	__stringlit_11, @object
	.size	__stringlit_11, . - __stringlit_11
	.section	.rodata
	.align	1
__stringlit_33:
	.ascii	"getx\000"
	.type	__stringlit_33, @object
	.size	__stringlit_33, . - __stringlit_33
	.section	.rodata
	.align	1
__stringlit_51:
	.ascii	"acos\000"
	.type	__stringlit_51, @object
	.size	__stringlit_51, . - __stringlit_51
	.section	.rodata
	.align	1
__stringlit_48:
	.ascii	"apply\000"
	.type	__stringlit_48, @object
	.size	__stringlit_48, . - __stringlit_48
	.section	.rodata
	.align	1
__stringlit_53:
	.ascii	"<Array>\000"
	.type	__stringlit_53, @object
	.size	__stringlit_53, . - __stringlit_53
	.section	.rodata
	.align	1
__stringlit_37:
	.ascii	"eqf\000"
	.type	__stringlit_37, @object
	.size	__stringlit_37, . - __stringlit_37
	.text
	.align	16
lookup:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebp, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	8(%edx), %eax
	movl	0(%esi), %ecx
	leal	-1(%ecx), %ecx
.L178:
	testl	%ecx, %ecx
	jl	.L179
	movl	8(%esi), %edi
	movl	%ecx, %edx
	sall	$4, %edx
	leal	0(%edx,%ecx,4), %edx
	movl	0(%edi,%edx,1), %ebp
	cmpl	%ebp, %ebx
	jne	.L180
	leal	8(%edi,%edx,1), %edx
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
	movl	$1, %eax
	jmp	.L181
.L180:
	leal	-1(%ecx), %ecx
	jmp	.L178
.L179:
	xorl	%eax, %eax
.L181:
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	movl	16(%esp), %ebp
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	lookup, @function
	.size	lookup, . - lookup
	.text
	.align	16
assign:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	0(%edi), %ecx
	leal	-1(%ecx), %ecx
.L182:
	testl	%ecx, %ecx
	jl	.L183
	movl	8(%edi), %edx
	movl	%ecx, %eax
	sall	$4, %eax
	leal	0(%eax,%ecx,4), %ebp
	movl	4(%edx,%ebp,1), %eax
	testl	%eax, %eax
	je	.L183
	movl	0(%edx,%ebp,1), %eax
	cmpl	%eax, %esi
	jne	.L184
	leal	8(%edx,%ebp,1), %eax
	movl	%ebx, %edx
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
	jmp	.L185
.L184:
	leal	-1(%ecx), %ecx
	jmp	.L182
.L183:
	movl	0(%edi), %edx
	movl	4(%edi), %eax
	cmpl	%eax, %edx
	jl	.L186
	movl	$20, %eax
	movl	%eax, 0(%esp)
	movl	%edi, 4(%esp)
	call	grow_array
.L186:
	movl	0(%edi), %ecx
	leal	1(%ecx), %eax
	movl	%eax, 0(%edi)
	movl	8(%edi), %ecx
	movl	%eax, %edx
	sall	$4, %edx
	leal	0(%edx,%eax,4), %eax
	movl	%esi, -20(%ecx,%eax,1)
	movl	$1, %edx
	movl	%edx, -16(%ecx,%eax,1)
	leal	-12(%ecx,%eax,1), %eax
	movl	%ebx, %edx
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
.L185:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	assign, @function
	.size	assign, . - assign
	.text
	.align	16
snapshot_env:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %ebx
	movl	$20, %ecx
	movl	$10, %eax
	movl	%ecx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%eax, 8(%esp)
	call	copy_array
	xorl	%ecx, %ecx
.L187:
	movl	0(%eax), %edx
	cmpl	%edx, %ecx
	jge	.L188
	movl	8(%eax), %ebx
	movl	%ecx, %edx
	sall	$4, %edx
	leal	0(%edx,%ecx,4), %edx
	xorl	%esi, %esi
	movl	%esi, 4(%ebx,%edx,1)
	leal	1(%ecx), %ecx
	jmp	.L187
.L188:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	snapshot_env, @function
	.size	snapshot_env, . - snapshot_env
	.data
	.align	4
operator_names:
	.long	__stringlit_59
	.long	__stringlit_58
	.long	__stringlit_57
	.long	__stringlit_56
	.long	__stringlit_55
	.long	__stringlit_54
	.long	__stringlit_53
	.long	__stringlit_52
	.long	__stringlit_51
	.long	__stringlit_50
	.long	__stringlit_49
	.long	__stringlit_48
	.long	__stringlit_47
	.long	__stringlit_46
	.long	__stringlit_45
	.long	__stringlit_44
	.long	__stringlit_43
	.long	__stringlit_42
	.long	__stringlit_41
	.long	__stringlit_40
	.long	__stringlit_39
	.long	__stringlit_38
	.long	__stringlit_37
	.long	__stringlit_36
	.long	__stringlit_35
	.long	__stringlit_34
	.long	__stringlit_33
	.long	__stringlit_32
	.long	__stringlit_31
	.long	__stringlit_30
	.long	__stringlit_29
	.long	__stringlit_28
	.long	__stringlit_27
	.long	__stringlit_26
	.long	__stringlit_25
	.long	__stringlit_24
	.long	__stringlit_23
	.long	__stringlit_22
	.long	__stringlit_21
	.long	__stringlit_20
	.long	__stringlit_19
	.long	__stringlit_18
	.long	__stringlit_17
	.long	__stringlit_16
	.long	__stringlit_15
	.long	__stringlit_14
	.long	__stringlit_13
	.long	__stringlit_12
	.long	__stringlit_11
	.long	__stringlit_10
	.long	__stringlit_9
	.long	__stringlit_8
	.long	__stringlit_7
	.long	__stringlit_6
	.long	__stringlit_5
	.long	__stringlit_4
	.long	__stringlit_3
	.long	__stringlit_2
	.long	__stringlit_1
	.type	operator_names, @object
	.size	operator_names, . - operator_names
	.text
	.align	16
light_array:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %ebx
	movl	0(%ebx), %ebp
	leal	4(,%ebp,4), %ecx
	movl	%ecx, 0(%esp)
	call	arena_alloc
	movl	%eax, %esi
	xorl	%edi, %edi
.L189:
	cmpl	%ebp, %edi
	jge	.L190
	movl	8(%ebx), %ecx
	leal	0(,%edi,8), %eax
	leal	0(%eax,%edi,4), %edx
	leal	0(%ecx,%edx,1), %eax
	movl	%eax, 32(%esp)
	movl	0(%ecx,%edx,1), %edx
	cmpl	$8, %edx
	je	.L191
	movl	stderr, %edx
	leal	__stringlit_60, %eax
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	movl	$2, %edx
	movl	%edx, 0(%esp)
	call	exit
.L191:
	movl	32(%esp), %eax
	movl	4(%eax), %eax
	movl	%eax, 0(%esi,%edi,4)
	leal	1(%edi), %edi
	jmp	.L189
.L190:
	xorl	%ecx, %ecx
	movl	%ecx, 0(%esi,%ebp,4)
	movl	%esi, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	light_array, @function
	.size	light_array, . - light_array
	.text
	.align	16
print_value:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 28(%esp)
	movl	0(%edx), %eax
	movl	0(%eax), %ecx
	cmpl	$9, %ecx
	jae	.L192
	jmp	*.L193(, %ecx, 4)
.L194:
	movl	4(%eax), %eax
	testl	%eax, %eax
	jne	.L195
	leal	__stringlit_69, %ecx
	jmp	.L196
.L195:
	leal	__stringlit_70, %ecx
.L196:
	leal	__stringlit_71, %edx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	printf
	jmp	.L192
.L197:
	leal	__stringlit_68, %edx
	movl	4(%eax), %eax
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	printf
	jmp	.L192
.L198:
	leal	__stringlit_67, %edx
	movsd	4(%eax), %xmm0
	movl	%edx, 0(%esp)
	movsd	%xmm0, 4(%esp)
	call	printf
	jmp	.L192
.L199:
	leal	__stringlit_66, %ecx
	movl	4(%eax), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	printf
	jmp	.L192
.L200:
	leal	__stringlit_65, %eax
	movl	%eax, 0(%esp)
	call	printf
	jmp	.L192
.L201:
	leal	__stringlit_64, %eax
	movl	%eax, 0(%esp)
	call	printf
	jmp	.L192
.L202:
	leal	__stringlit_63, %edx
	movl	4(%eax), %eax
	movsd	0(%eax), %xmm5
	movsd	8(%eax), %xmm7
	movsd	16(%eax), %xmm6
	movl	%edx, 0(%esp)
	movsd	%xmm5, 4(%esp)
	movsd	%xmm7, 12(%esp)
	movsd	%xmm6, 20(%esp)
	call	printf
	jmp	.L192
.L203:
	leal	__stringlit_62, %edx
	movl	%edx, 0(%esp)
	call	printf
	jmp	.L192
.L204:
	leal	__stringlit_61, %edx
	movl	%edx, 0(%esp)
	call	printf
.L192:
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	print_value, @function
	.size	print_value, . - print_value
	.text
	.align	4
.L193:	.long	.L194
	.long	.L197
	.long	.L198
	.long	.L199
	.long	.L200
	.long	.L201
	.long	.L202
	.long	.L203
	.long	.L204
	.local	main_stack
	.comm	main_stack, 120000, 4
	.local	surface_stack
	.comm	surface_stack, 12000, 4
	.text
	.align	16
execute_list:
	.cfi_startproc
	subl	$116, %esp
	.cfi_adjust_cfa_offset	116
	leal	120(%esp), %edx
	movl	%edx, 40(%esp)
	movl	%ebx, 44(%esp)
	movl	%esi, 48(%esp)
	movl	%edi, 52(%esp)
	movl	%ebp, 56(%esp)
	movl	0(%edx), %edx
	movl	%edx, 92(%esp)
	movl	40(%esp), %edx
	movl	4(%edx), %edx
	movl	%edx, 88(%esp)
	movl	40(%esp), %edx
	movl	8(%edx), %esi
	movl	12(%edx), %ebp
	movl	16(%edx), %ebx
	xorl	%ecx, %ecx
	movl	%ecx, 84(%esp)
.L205:
	movl	92(%esp), %eax
	movl	0(%eax), %ecx
	movl	84(%esp), %edx
	cmpl	%ecx, %edx
	jge	.L206
	movl	8(%eax), %ecx
	leal	0(,%edx,8), %eax
	leal	0(%eax,%edx,4), %edx
	leal	0(%ecx,%edx,1), %eax
	movl	%eax, 72(%esp)
	movl	0(%ecx,%edx,1), %eax
	cmpl	$59, %eax
	jae	.L207
	jmp	*.L208(, %eax, 4)
.L209:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	4(%ecx,%edx,1), %edx
	movl	88(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	lookup
	testl	%eax, %eax
	jne	.L207
	movl	stderr, %ecx
	leal	__stringlit_79, %eax
	movl	72(%esp), %edx
	movl	4(%edx), %edx
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	fprintf
	movl	$2, %eax
	movl	%eax, 0(%esp)
	call	exit
	jmp	.L207
.L211:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	4(%ecx,%edx,1), %eax
	movl	88(%esp), %ecx
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ebx, 8(%esp)
	call	assign
	leal	12(%ebx), %ebx
	jmp	.L207
.L213:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	xorl	%eax, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ecx,%edx,1), %ecx
	movl	%ecx, 4(%ebx)
	jmp	.L207
.L214:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	$1, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ecx,%edx,1), %eax
	movl	%eax, 4(%ebx)
	jmp	.L207
.L215:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	$2, %eax
	movl	%eax, 0(%ebx)
	movsd	4(%ecx,%edx,1), %xmm3
	movsd	%xmm3, 4(%ebx)
	jmp	.L207
.L216:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	$3, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ecx,%edx,1), %eax
	movl	%eax, 4(%ebx)
	jmp	.L207
.L217:
	movl	4(%ecx,%edx,1), %edx
	movl	%edx, 0(%esp)
	movl	88(%esp), %eax
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%ebx, 16(%esp)
	call	execute_list
	movl	%eax, %ecx
	movl	%ebx, %eax
	subl	%ecx, %eax
	movl	$-1431655765, %ecx
	mull	%ecx
	shrl	$3, %edx
	movl	%edx, 68(%esp)
	movl	$12, %ecx
	movl	%ecx, 0(%esp)
	movl	68(%esp), %edx
	movl	%edx, 4(%esp)
	call	alloc_array
	movl	%eax, 64(%esp)
	movl	64(%esp), %ecx
	movl	68(%esp), %edx
	movl	%edx, 0(%ecx)
	xorl	%edi, %edi
.L218:
	movl	68(%esp), %eax
	cmpl	%eax, %edi
	jge	.L219
	movl	64(%esp), %eax
	movl	8(%eax), %ecx
	leal	0(,%edi,8), %eax
	leal	0(%eax,%edi,4), %edx
	leal	0(%ecx,%edx,1), %eax
	movl	$-1, %edx
	subl	%edi, %edx
	leal	0(,%edx,8), %ecx
	leal	0(%ecx,%edx,4), %edx
	leal	0(%ebx,%edx,1), %edx
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
	leal	1(%edi), %edi
	jmp	.L218
.L219:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	$4, %eax
	movl	%eax, 0(%ebx)
	movl	64(%esp), %eax
	movl	%eax, 4(%ebx)
	jmp	.L207
.L220:
	leal	-12(%ebx), %ebx
	cmpl	%esi, %ebx
	jb	.L210
	movl	$5, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ecx,%edx,1), %edx
	movl	%edx, 4(%ebx)
	movl	88(%esp), %eax
	movl	%eax, 0(%esp)
	call	snapshot_env
	movl	%eax, 8(%ebx)
	jmp	.L207
.L210:
	movl	stderr, %edx
	leal	__stringlit_78, %eax
	movl	%edx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	jmp	.L221
.L222:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movsd	4(%ebx), %xmm5
	movsd	%xmm5, 0(%esp)
	call	acos
	fstpl	64(%esp)
	movsd	64(%esp), %xmm2
	movsd	.L224, %xmm3 # 57.2957795130823229
	mulsd	%xmm3, %xmm2
	movsd	%xmm2, 4(%ebx)
	jmp	.L207
.L225:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	16(%ebx), %edx
	movl	4(%ebx), %ecx
	leal	0(%edx,%ecx,1), %ecx
	movl	%ecx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L226:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	16(%ebx), %xmm3
	movsd	4(%ebx), %xmm1
	addsd	%xmm1, %xmm3
	movsd	%xmm3, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L227:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$5, %ecx
	jne	.L223
	movl	4(%ebx), %ecx
	movl	8(%ebx), %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%ebp, 12(%esp)
	movl	%edx, 16(%esp)
	call	execute_list
	movl	%eax, %ebx
	jmp	.L207
.L228:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm1
	movsd	%xmm1, 0(%esp)
	call	asin
	fstpl	64(%esp)
	movsd	64(%esp), %xmm0
	movsd	.L229, %xmm5 # 57.2957795130823229
	mulsd	%xmm5, %xmm0
	movsd	%xmm0, 4(%ebx)
	jmp	.L207
.L230:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movsd	4(%ebx), %xmm3
	xorpd	%xmm4, %xmm4
	comisd	%xmm3, %xmm4
	ja	.L231
	movsd	.L232, %xmm4 # 1
	comisd	%xmm4, %xmm3
	ja	.L231
	movapd	%xmm3, %xmm4
.L231:
	movsd	%xmm4, 4(%ebx)
	jmp	.L207
.L233:
	leal	12(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$5, %eax
	jne	.L223
	movl	$7, %edx
	movl	%edx, 0(%ebx)
	leal	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	cone
	movl	%eax, 4(%ebx)
	jmp	.L207
.L234:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm6
	movsd	.L235, %xmm0 # 0.0174532925199432955
	mulsd	%xmm0, %xmm6
	movsd	%xmm6, 0(%esp)
	call	cos
	fstpl	64(%esp)
	movsd	64(%esp), %xmm6
	movsd	%xmm6, 4(%ebx)
	jmp	.L207
.L236:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$5, %eax
	jne	.L223
	movl	$7, %edx
	movl	%edx, 0(%ebx)
	leal	4(%ebx), %edx
	movl	%edx, 0(%esp)
	call	cube
	movl	%eax, 4(%ebx)
	jmp	.L207
.L237:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$5, %ecx
	jne	.L223
	movl	$7, %edx
	movl	%edx, 0(%ebx)
	leal	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	cylinder
	movl	%eax, 4(%ebx)
	jmp	.L207
.L238:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$7, %edx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$7, %ecx
	jne	.L223
	movl	16(%ebx), %edx
	movl	4(%ebx), %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	odifference
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L239:
	leal	24(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	4(%ebx), %ecx
	testl	%ecx, %ecx
	je	.L240
	movl	16(%ebx), %eax
	cltd
	idivl	%ecx
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L241:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	16(%ebx), %xmm0
	movsd	4(%ebx), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L242:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	xorl	%ecx, %ecx
	movl	%ecx, 12(%ebx)
	movl	16(%ebx), %ecx
	movl	4(%ebx), %eax
	cmpl	%eax, %ecx
	sete	%dl
	movzbl	%dl, %edx
	movl	%edx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L243:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	xorl	%edx, %edx
	movl	%edx, 12(%ebx)
	movsd	16(%ebx), %xmm5
	movsd	4(%ebx), %xmm2
	comisd	%xmm2, %xmm5
	setnp	%al
	movzbl	%al, %eax
	sete	%dl
	movzbl	%dl, %edx
	andl	%eax, %edx
	movl	%edx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L244:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movl	$1, %edx
	movl	%edx, 0(%ebx)
	movsd	4(%ebx), %xmm5
	movsd	%xmm5, 0(%esp)
	call	floor
	fstpl	64(%esp)
	movsd	64(%esp), %xmm7
	cvttsd2si %xmm7, %edx
	movl	%edx, 4(%ebx)
	jmp	.L207
.L245:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm7
	leal	104(%esp), %ecx
	movsd	%xmm7, 0(%esp)
	movl	%ecx, 8(%esp)
	call	modf
	fstpl	64(%esp)
	movsd	64(%esp), %xmm4
	movsd	%xmm4, 4(%ebx)
	jmp	.L207
.L246:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$4, %eax
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	16(%ebx), %ecx
	movl	4(%ebx), %edx
	testl	%edx, %edx
	jl	.L247
	movl	0(%ecx), %eax
	cmpl	%eax, %edx
	jge	.L247
	leal	12(%ebx), %ebx
	movl	8(%ecx), %eax
	leal	0(,%edx,8), %ecx
	leal	0(%ecx,%edx,4), %ecx
	leal	0(%eax,%ecx,1), %edx
	movl	%ebx, %eax
# begin builtin __builtin_memcpy_aligned, size = 12, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
	movl	8(%edx), %ecx
	movl	%ecx, 8(%eax)
# end builtin __builtin_memcpy_aligned
	jmp	.L207
.L247:
	movl	stderr, %ecx
	leal	__stringlit_74, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	jmp	.L221
.L248:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$6, %ecx
	jne	.L223
	movl	$2, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ebx), %ecx
	movsd	0(%ecx), %xmm6
	movsd	%xmm6, 4(%ebx)
	jmp	.L207
.L249:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$6, %eax
	jne	.L223
	movl	$2, %ecx
	movl	%ecx, 0(%ebx)
	movl	4(%ebx), %eax
	movsd	8(%eax), %xmm4
	movsd	%xmm4, 4(%ebx)
	jmp	.L207
.L250:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %edx
	cmpl	$6, %edx
	jne	.L223
	movl	$2, %edx
	movl	%edx, 0(%ebx)
	movl	4(%ebx), %edx
	movsd	16(%edx), %xmm2
	movsd	%xmm2, 4(%ebx)
	jmp	.L207
.L251:
	leal	36(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	24(%ebx), %ecx
	testl	%ecx, %ecx
	jne	.L223
	movl	12(%ebx), %ecx
	cmpl	$5, %ecx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$5, %ecx
	jne	.L223
	movl	28(%ebx), %eax
	testl	%eax, %eax
	jne	.L252
	movl	4(%ebx), %eax
	movl	8(%ebx), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%ebp, 12(%esp)
	movl	%edx, 16(%esp)
	call	execute_list
	movl	%eax, %ebx
	jmp	.L207
.L252:
	movl	16(%ebx), %eax
	movl	20(%ebx), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%ebp, 12(%esp)
	movl	%edx, 16(%esp)
	call	execute_list
	movl	%eax, %ebx
	jmp	.L207
.L253:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$7, %eax
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$7, %ecx
	jne	.L223
	movl	16(%ebx), %ecx
	movl	4(%ebx), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	ointersect
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L254:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %edx
	cmpl	$4, %edx
	jne	.L223
	movl	$1, %eax
	movl	%eax, 0(%ebx)
	movl	4(%ebx), %ecx
	movl	0(%ecx), %eax
	movl	%eax, 4(%ebx)
	jmp	.L207
.L255:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	xorl	%eax, %eax
	movl	%eax, 12(%ebx)
	movl	16(%ebx), %ecx
	movl	4(%ebx), %eax
	cmpl	%eax, %ecx
	setl	%dl
	movzbl	%dl, %edx
	movl	%edx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L256:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	xorl	%eax, %eax
	movl	%eax, 12(%ebx)
	movsd	16(%ebx), %xmm3
	movsd	4(%ebx), %xmm5
	comisd	%xmm3, %xmm5
	seta	%cl
	movzbl	%cl, %ecx
	movl	%ecx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L257:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$6, %edx
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$6, %eax
	jne	.L223
	movl	$8, %ecx
	movl	%ecx, 12(%ebx)
	movl	16(%ebx), %eax
	movl	4(%ebx), %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	dirlight
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L258:
	leal	24(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	4(%ebx), %ecx
	testl	%ecx, %ecx
	je	.L240
	movl	16(%ebx), %eax
	cltd
	idivl	%ecx
	movl	%edx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L240:
	movl	stderr, %eax
	leal	__stringlit_75, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fprintf
	jmp	.L221
.L259:
	leal	24(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	16(%ebx), %ecx
	movl	4(%ebx), %edx
	imull	%edx, %ecx
	movl	%ecx, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L260:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movsd	16(%ebx), %xmm2
	movsd	4(%ebx), %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L261:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$1, %eax
	jne	.L223
	movl	4(%ebx), %eax
	negl	%eax
	movl	%eax, 4(%ebx)
	jmp	.L207
.L262:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm0
	xorpd	__negd_mask, %xmm0
	movsd	%xmm0, 4(%ebx)
	jmp	.L207
.L263:
	leal	12(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	0(%ebx), %edx
	cmpl	$5, %edx
	jne	.L223
	movl	$7, %edx
	movl	%edx, 0(%ebx)
	leal	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	plane
	movl	%eax, 4(%ebx)
	jmp	.L207
.L264:
	leal	36(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	24(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movl	12(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movl	$24, %eax
	movl	%eax, 0(%esp)
	call	arena_alloc
	movsd	28(%ebx), %xmm1
	movsd	%xmm1, 0(%eax)
	movsd	16(%ebx), %xmm4
	movsd	%xmm4, 8(%eax)
	movsd	4(%ebx), %xmm6
	movsd	%xmm6, 16(%eax)
	leal	24(%ebx), %ebx
	movl	$6, %edx
	movl	%edx, 0(%ebx)
	movl	%eax, 4(%ebx)
	jmp	.L207
.L265:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %ecx
	cmpl	$6, %ecx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$6, %edx
	jne	.L223
	movl	$8, %eax
	movl	%eax, 12(%ebx)
	movl	16(%ebx), %ecx
	movl	4(%ebx), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	pointlight
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L266:
	leal	12(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	0(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	$2, %ecx
	movl	%ecx, 0(%ebx)
	movl	4(%ebx), %ecx
	cvtsi2sd %ecx, %xmm3
	movsd	%xmm3, 4(%ebx)
	jmp	.L207
.L267:
	leal	96(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %edx
	cmpl	$3, %edx
	jne	.L223
	movl	12(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	24(%ebx), %edx
	cmpl	$1, %edx
	jne	.L223
	movl	36(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	48(%ebx), %ecx
	cmpl	$1, %ecx
	jne	.L223
	movl	60(%ebx), %ecx
	cmpl	$7, %ecx
	jne	.L223
	movl	72(%ebx), %edx
	cmpl	$4, %edx
	jne	.L223
	movl	84(%ebx), %ecx
	cmpl	$6, %ecx
	jne	.L223
	movl	76(%ebx), %eax
	movl	%eax, 0(%esp)
	call	light_array
	movl	%eax, 80(%esp)
	movsd	40(%ebx), %xmm5
	movsd	.L268, %xmm1 # 0.0174532925199432955
	mulsd	%xmm1, %xmm5
	movl	88(%ebx), %eax
	movl	76(%ebx), %ecx
	movl	0(%ecx), %ecx
	movl	%ecx, 76(%esp)
	movl	64(%ebx), %ecx
	movl	52(%ebx), %edx
	movl	%edx, 68(%esp)
	movl	28(%ebx), %edx
	movl	%edx, 72(%esp)
	movl	16(%ebx), %edx
	movl	4(%ebx), %edi
	movl	%edi, 64(%esp)
	movl	%eax, 0(%esp)
	movl	76(%esp), %edi
	movl	%edi, 4(%esp)
	movl	80(%esp), %edi
	movl	%edi, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	68(%esp), %edi
	movl	%edi, 16(%esp)
	movsd	%xmm5, 20(%esp)
	movl	72(%esp), %edi
	movl	%edi, 28(%esp)
	movl	%edx, 32(%esp)
	movl	64(%esp), %edi
	movl	%edi, 36(%esp)
	call	render
	leal	96(%ebx), %ebx
	jmp	.L207
.L269:
	leal	24(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$7, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movsd	4(%ebx), %xmm7
	movsd	.L270, %xmm0 # 0.0174532925199432955
	mulsd	%xmm0, %xmm7
	movl	16(%ebx), %eax
	movl	%eax, 0(%esp)
	movsd	%xmm7, 4(%esp)
	call	orotatex
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L271:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$7, %eax
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm1
	movsd	.L272, %xmm2 # 0.0174532925199432955
	mulsd	%xmm2, %xmm1
	movl	16(%ebx), %ecx
	movl	%ecx, 0(%esp)
	movsd	%xmm1, 4(%esp)
	call	orotatey
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L273:
	leal	24(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	12(%ebx), %eax
	cmpl	$7, %eax
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movsd	4(%ebx), %xmm1
	movsd	.L274, %xmm2 # 0.0174532925199432955
	mulsd	%xmm2, %xmm1
	movl	16(%ebx), %eax
	movl	%eax, 0(%esp)
	movsd	%xmm1, 4(%esp)
	call	orotatez
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L275:
	leal	48(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	36(%ebx), %edx
	cmpl	$7, %edx
	jne	.L223
	movl	24(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	12(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movl	40(%ebx), %edx
	movsd	28(%ebx), %xmm3
	movsd	16(%ebx), %xmm2
	movsd	4(%ebx), %xmm7
	movl	%edx, 0(%esp)
	movsd	%xmm3, 4(%esp)
	movsd	%xmm2, 12(%esp)
	movsd	%xmm7, 20(%esp)
	call	oscale
	movl	%eax, 40(%ebx)
	leal	36(%ebx), %ebx
	jmp	.L207
.L276:
	leal	12(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movsd	4(%ebx), %xmm2
	movsd	.L277, %xmm6 # 0.0174532925199432955
	mulsd	%xmm6, %xmm2
	movsd	%xmm2, 0(%esp)
	call	sin
	fstpl	64(%esp)
	movsd	64(%esp), %xmm3
	movsd	%xmm3, 4(%ebx)
	jmp	.L207
.L278:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %ecx
	cmpl	$5, %ecx
	jne	.L223
	movl	$7, %edx
	movl	%edx, 0(%ebx)
	leal	4(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	sphere
	movl	%eax, 4(%ebx)
	jmp	.L207
.L279:
	leal	60(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	48(%ebx), %eax
	cmpl	$6, %eax
	jne	.L223
	movl	36(%ebx), %ecx
	cmpl	$6, %ecx
	jne	.L223
	movl	24(%ebx), %edx
	cmpl	$6, %edx
	jne	.L223
	movl	12(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	$8, %eax
	movl	%eax, 48(%ebx)
	movsd	16(%ebx), %xmm4
	movsd	.L280, %xmm7 # 0.0174532925199432955
	mulsd	%xmm7, %xmm4
	movl	52(%ebx), %eax
	movl	40(%ebx), %edi
	movl	28(%ebx), %ecx
	movsd	4(%ebx), %xmm7
	movl	%eax, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%ecx, 8(%esp)
	movsd	%xmm4, 12(%esp)
	movsd	%xmm7, 20(%esp)
	call	spotlight
	movl	%eax, 52(%ebx)
	leal	48(%ebx), %ebx
	jmp	.L207
.L281:
	leal	12(%ebx), %edx
	cmpl	%ebp, %edx
	ja	.L212
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movsd	4(%ebx), %xmm4
	xorpd	%xmm7, %xmm7
	comisd	%xmm4, %xmm7
	ja	.L282
	movsd	%xmm4, 0(%esp)
	call	sqrt
	fstpl	64(%esp)
	movsd	64(%esp), %xmm3
	movsd	%xmm3, 4(%ebx)
	jmp	.L207
.L282:
	movl	stderr, %ecx
	leal	__stringlit_73, %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	fprintf
	jmp	.L221
.L283:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %ecx
	cmpl	$1, %ecx
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$1, %ecx
	jne	.L223
	movl	16(%ebx), %eax
	movl	4(%ebx), %edx
	subl	%edx, %eax
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L284:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movsd	16(%ebx), %xmm7
	movsd	4(%ebx), %xmm0
	subsd	%xmm0, %xmm7
	movsd	%xmm7, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L285:
	leal	48(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	36(%ebx), %ecx
	cmpl	$7, %ecx
	jne	.L223
	movl	24(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	12(%ebx), %eax
	cmpl	$2, %eax
	jne	.L223
	movl	0(%ebx), %ecx
	cmpl	$2, %ecx
	jne	.L223
	movl	40(%ebx), %eax
	movsd	28(%ebx), %xmm1
	movsd	16(%ebx), %xmm3
	movsd	4(%ebx), %xmm6
	movl	%eax, 0(%esp)
	movsd	%xmm1, 4(%esp)
	movsd	%xmm3, 12(%esp)
	movsd	%xmm6, 20(%esp)
	call	otranslate
	movl	%eax, 40(%ebx)
	leal	36(%ebx), %ebx
	jmp	.L207
.L286:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$7, %edx
	jne	.L223
	movl	0(%ebx), %eax
	cmpl	$7, %eax
	jne	.L223
	movl	16(%ebx), %ecx
	movl	4(%ebx), %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	ounion
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L287:
	leal	24(%ebx), %ecx
	cmpl	%ebp, %ecx
	ja	.L212
	movl	12(%ebx), %edx
	cmpl	$7, %edx
	jne	.L223
	movl	0(%ebx), %edx
	cmpl	$2, %edx
	jne	.L223
	movl	16(%ebx), %ecx
	movsd	4(%ebx), %xmm0
	movl	%ecx, 0(%esp)
	movsd	%xmm0, 4(%esp)
	call	ouscale
	movl	%eax, 16(%ebx)
	leal	12(%ebx), %ebx
	jmp	.L207
.L223:
	movl	stderr, %eax
	leal	__stringlit_76, %edx
	movl	%eax, 0(%esp)
	movl	%edx, 4(%esp)
	call	fprintf
	jmp	.L221
.L288:
	leal	12(%ebx), %eax
	cmpl	%ebp, %eax
	ja	.L212
	movl	%ebx, 0(%esp)
	call	print_value
	leal	12(%ebx), %ebx
	jmp	.L207
.L212:
	movl	stderr, %edx
	leal	__stringlit_77, %ecx
	movl	%edx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fprintf
.L221:
	movl	stderr, %ebx
	leal	__stringlit_72, %eax
	movl	72(%esp), %ecx
	movl	0(%ecx), %edx
	movl	operator_names(,%edx,4), %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	84(%esp), %ecx
	movl	%ecx, 12(%esp)
	call	fprintf
	movl	$2, %edx
	movl	%edx, 0(%esp)
	call	exit
	jmp	.L289
.L207:
	movl	84(%esp), %eax
	leal	1(%eax), %edx
	movl	%edx, 84(%esp)
	jmp	.L205
.L206:
	movl	%ebx, 96(%esp)
.L289:
	movl	96(%esp), %eax
	movl	44(%esp), %ebx
	movl	48(%esp), %esi
	movl	52(%esp), %edi
	movl	56(%esp), %ebp
	addl	$116, %esp
	ret
	.cfi_endproc
	.type	execute_list, @function
	.size	execute_list, . - execute_list
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.L280:	.quad	0x3f91df46a2529d39
.L277:	.quad	0x3f91df46a2529d39
.L274:	.quad	0x3f91df46a2529d39
.L272:	.quad	0x3f91df46a2529d39
.L270:	.quad	0x3f91df46a2529d39
.L268:	.quad	0x3f91df46a2529d39
.L235:	.quad	0x3f91df46a2529d39
.L232:	.quad	0x3ff0000000000000
.L229:	.quad	0x404ca5dc1a63c1f8
.L224:	.quad	0x404ca5dc1a63c1f8
	.text
	.align	4
.L208:	.long	.L209
	.long	.L211
	.long	.L213
	.long	.L214
	.long	.L215
	.long	.L216
	.long	.L217
	.long	.L220
	.long	.L222
	.long	.L225
	.long	.L226
	.long	.L227
	.long	.L228
	.long	.L230
	.long	.L233
	.long	.L234
	.long	.L236
	.long	.L237
	.long	.L238
	.long	.L239
	.long	.L241
	.long	.L242
	.long	.L243
	.long	.L244
	.long	.L245
	.long	.L246
	.long	.L248
	.long	.L249
	.long	.L250
	.long	.L251
	.long	.L253
	.long	.L254
	.long	.L255
	.long	.L256
	.long	.L257
	.long	.L258
	.long	.L259
	.long	.L260
	.long	.L261
	.long	.L262
	.long	.L263
	.long	.L264
	.long	.L265
	.long	.L266
	.long	.L267
	.long	.L269
	.long	.L271
	.long	.L273
	.long	.L275
	.long	.L276
	.long	.L278
	.long	.L279
	.long	.L281
	.long	.L283
	.long	.L284
	.long	.L285
	.long	.L286
	.long	.L287
	.long	.L288
	.text
	.align	16
	.globl surface_function
surface_function:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	%ebp, 36(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	movsd	8(%edx), %xmm1
	movsd	16(%edx), %xmm0
	movl	24(%edx), %esi
	leal	40(%esp), %eax
	movl	%ecx, %edx
# begin builtin __builtin_memcpy_aligned, size = 8, alignment = 4
	movq	0(%edx), %xmm7
	movq	%xmm7, 0(%eax)
# end builtin __builtin_memcpy_aligned
	leal	(surface_stack + 11964), %edi
	movl	$1, %edx
	movl	%edx, (surface_stack + 11988)
	movl	%ebx, (surface_stack + 11992)
	movl	$2, %ecx
	movl	%ecx, (surface_stack + 11976)
	cvttsd2si %xmm1, %ecx
	movl	%ecx, (surface_stack + 11980)
	movl	$2, %ecx
	movl	%ecx, (surface_stack + 11964)
	cvttsd2si %xmm0, %eax
	movl	%eax, (surface_stack + 11968)
	movl	40(%esp), %eax
	movl	44(%esp), %ebp
	leal	surface_stack, %edx
	leal	(surface_stack + 12000), %ebx
	movl	%eax, 0(%esp)
	movl	%ebp, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%edi, 16(%esp)
	call	execute_list
	movl	%eax, %ebx
	leal	(surface_stack + 11952), %ecx
	cmpl	%ecx, %ebx
	jne	.L290
	movl	0(%ebx), %eax
	cmpl	$2, %eax
	jne	.L290
	movl	12(%ebx), %edx
	cmpl	$2, %edx
	jne	.L290
	movl	24(%ebx), %eax
	cmpl	$2, %eax
	jne	.L290
	movl	36(%ebx), %eax
	cmpl	$6, %eax
	je	.L291
.L290:
	movl	stderr, %ecx
	leal	__stringlit_80, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	fprintf
	movl	$2, %eax
	movl	%eax, 0(%esp)
	call	exit
.L291:
	movl	40(%ebx), %edx
	movsd	0(%edx), %xmm6
	movsd	%xmm6, 0(%esi)
	movl	40(%ebx), %edx
	movsd	8(%edx), %xmm2
	movsd	%xmm2, 8(%esi)
	movl	40(%ebx), %eax
	movsd	16(%eax), %xmm0
	movsd	%xmm0, 16(%esi)
	movsd	28(%ebx), %xmm7
	movsd	%xmm7, 24(%esi)
	movsd	16(%ebx), %xmm2
	movsd	%xmm2, 32(%esi)
	movsd	4(%ebx), %xmm5
	movsd	%xmm5, 40(%esi)
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	movl	32(%esp), %edi
	movl	36(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	surface_function, @function
	.size	surface_function, . - surface_function
	.text
	.align	16
	.globl execute_program
execute_program:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	0(%edx), %ebx
	movl	$20, %ecx
	movl	$50, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	alloc_array
	leal	main_stack, %esi
	leal	(main_stack + 120000), %ecx
	leal	(main_stack + 120000), %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%ecx, 12(%esp)
	movl	%edx, 16(%esp)
	call	execute_list
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	execute_program, @function
	.size	execute_program, . - execute_program
	.section	.rodata
	.align	16
__negd_mask:	.quad   0x8000000000000000, 0
__absd_mask:	.quad   0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF
__negs_mask:	.long   0x80000000, 0, 0, 0
__abss_mask:	.long   0x7FFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
